"use strict";(self.webpackChunkpocs=self.webpackChunkpocs||[]).push([[272],{"./src/components/map-listings/map-listings.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Part1_BasicListings:()=>Part1_BasicListings,Part2_AverageCenter:()=>Part2_AverageCenter,Part3_CityCenter:()=>Part3_CityCenter,Part4_FilteredSearch:()=>Part4_FilteredSearch,__namedExportsOrder:()=>__namedExportsOrder,default:()=>map_listings_stories});var jsx_runtime=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),mapbox_gl=__webpack_require__("./node_modules/mapbox-gl/dist/mapbox-gl.js"),mapbox_gl_default=__webpack_require__.n(mapbox_gl),console=(__webpack_require__("./node_modules/mapbox-gl/dist/mapbox-gl.css"),__webpack_require__("./node_modules/console-browserify/index.js"));const extractCoordinates=listing=>{var _listing_coordinates,_listing_coordinates1,_listing_map,_listing_map1,_listing_location,_listing_location1,_listing_center,_listing_center1;return(null===(_listing_coordinates=listing.coordinates)||void 0===_listing_coordinates?void 0:_listing_coordinates.lat)&&(null===(_listing_coordinates1=listing.coordinates)||void 0===_listing_coordinates1?void 0:_listing_coordinates1.lng)?{lat:listing.coordinates.lat,lng:listing.coordinates.lng}:listing.latitude&&listing.longitude?{lat:listing.latitude,lng:listing.longitude}:(null===(_listing_map=listing.map)||void 0===_listing_map?void 0:_listing_map.latitude)&&(null===(_listing_map1=listing.map)||void 0===_listing_map1?void 0:_listing_map1.longitude)?{lat:listing.map.latitude,lng:listing.map.longitude}:(null===(_listing_location=listing.location)||void 0===_listing_location?void 0:_listing_location.latitude)&&(null===(_listing_location1=listing.location)||void 0===_listing_location1?void 0:_listing_location1.longitude)?{lat:listing.location.latitude,lng:listing.location.longitude}:(null===(_listing_center=listing.center)||void 0===_listing_center?void 0:_listing_center.lat)&&(null===(_listing_center1=listing.center)||void 0===_listing_center1?void 0:_listing_center1.lng)?{lat:listing.center.lat,lng:listing.center.lng}:null},getPolygonBounds=coordinates=>{if(0===coordinates.length)return null;let north=coordinates[0].lat,south=coordinates[0].lat,east=coordinates[0].lng,west=coordinates[0].lng;return coordinates.forEach((coord=>{north=Math.max(north,coord.lat),south=Math.min(south,coord.lat),east=Math.max(east,coord.lng),west=Math.min(west,coord.lng)})),{north,south,east,west}},calculateAverageCenter=(coordinates,bounds)=>{const{north,south,east,west}=bounds,latStep=(north-south)/20,lngStep=(east-west)/20,densityGrid=Array(20).fill(0).map((()=>Array(20).fill(0)));coordinates.forEach((coord=>{const latIndex=Math.floor((coord.lat-south)/latStep),lngIndex=Math.floor((coord.lng-west)/lngStep),safeLatIndex=Math.max(0,Math.min(19,latIndex)),safeLngIndex=Math.max(0,Math.min(19,lngIndex));densityGrid[safeLatIndex][safeLngIndex]++}));let maxDensity=0,densestLat=0,densestLng=0;for(let i=0;i<20;i++)for(let j=0;j<20;j++)densityGrid[i][j]>maxDensity&&(maxDensity=densityGrid[i][j],densestLat=south+(i+.5)*latStep,densestLng=west+(j+.5)*lngStep);const center=maxDensity>0?[densestLng,densestLat]:[(east+west)/2,(north+south)/2],densityRatio=maxDensity/coordinates.length;return console.log(`📍 Density-weighted center: [${center[0].toFixed(4)}, ${center[1].toFixed(4)}] (density: ${densityRatio.toFixed(2)})`),center},setCachedAutoCenter=(apiKey,data)=>{try{const cacheData={...data,timestamp:Date.now()};localStorage.setItem(`mapListings-autoCenter-${apiKey}`,JSON.stringify(cacheData))}catch(error){console.warn("Failed to cache auto-center data:",error)}},detectAutoCenter=async(apiKey,method="average")=>{try{if(console.log(`🎯 Auto-detecting map center using ${method} method...`),"city"===method){const clusterCenter=await(async apiKey=>{try{var _data_aggregates_map,_data_aggregates,_largestCluster_location,_largestCluster_coordinates,_largestCluster_center,_largestCluster_location1,_largestCluster_coordinates1,_largestCluster_center1;console.log("🎯 Finding largest cluster center...");const url=new URL("https://api.repliers.io/listings");url.searchParams.set("cluster","true"),url.searchParams.set("clusterPrecision","8"),url.searchParams.set("clusterLimit","50"),url.searchParams.set("status","A"),url.searchParams.set("key",apiKey);const response=await fetch(url.toString(),{headers:{"REPLIERS-API-KEY":apiKey,"Content-Type":"application/json"}});if(!response.ok)throw new Error(`Largest cluster API Error: ${response.status} ${response.statusText}`);const data=await response.json(),clusters=(null===(_data_aggregates=data.aggregates)||void 0===_data_aggregates||null===(_data_aggregates_map=_data_aggregates.map)||void 0===_data_aggregates_map?void 0:_data_aggregates_map.clusters)||data.clusters||[];if(!clusters||0===clusters.length)return console.warn("⚠️ No clusters found"),null;let largestCluster=null,maxCount=0;if(clusters.forEach((cluster=>{const count=cluster.count||0;count>maxCount&&(maxCount=count,largestCluster=cluster)})),!largestCluster)return console.warn("⚠️ No valid cluster found"),null;const coordinates=[(null===(_largestCluster_location=largestCluster.location)||void 0===_largestCluster_location?void 0:_largestCluster_location.longitude)||(null===(_largestCluster_coordinates=largestCluster.coordinates)||void 0===_largestCluster_coordinates?void 0:_largestCluster_coordinates.lng)||largestCluster.longitude||(null===(_largestCluster_center=largestCluster.center)||void 0===_largestCluster_center?void 0:_largestCluster_center.lng),(null===(_largestCluster_location1=largestCluster.location)||void 0===_largestCluster_location1?void 0:_largestCluster_location1.latitude)||(null===(_largestCluster_coordinates1=largestCluster.coordinates)||void 0===_largestCluster_coordinates1?void 0:_largestCluster_coordinates1.lat)||largestCluster.latitude||(null===(_largestCluster_center1=largestCluster.center)||void 0===_largestCluster_center1?void 0:_largestCluster_center1.lat)];if(!coordinates[0]||!coordinates[1])return console.warn("⚠️ No coordinates found for largest cluster"),null;const center=[coordinates[0],coordinates[1]];return console.log(`🏆 Largest cluster: ${maxCount} listings at [${center[0].toFixed(4)}, ${center[1].toFixed(4)}]`),center}catch(error){return console.error("❌ Largest cluster detection failed:",error),null}})(apiKey);if(clusterCenter){const autoCenter={center:clusterCenter};return console.log(`✅ Largest cluster center detected: [${autoCenter.center[0]}, ${autoCenter.center[1]}]`),setCachedAutoCenter(`${apiKey}-${method}`,autoCenter),autoCenter}console.warn("⚠️ Largest cluster method failed, falling back to average method")}const url=new URL("https://api.repliers.io/listings");url.searchParams.set("cluster","false"),url.searchParams.set("listings","true"),url.searchParams.set("pageSize","500"),url.searchParams.set("status","A"),url.searchParams.set("key",apiKey);const response=await fetch(url.toString(),{headers:{"REPLIERS-API-KEY":apiKey,"Content-Type":"application/json"}});if(!response.ok)throw new Error(`Auto-center API Error: ${response.status} ${response.statusText}`);const data=await response.json(),listings=data.listings||data.results||[];if(!listings||0===listings.length)return console.warn("⚠️ No listings found for auto-center detection"),null;const coordinates=[];if(listings.forEach((listing=>{const coord=extractCoordinates(listing);coord&&coordinates.push(coord)})),0===coordinates.length)return console.warn("⚠️ No valid coordinates found in listings"),null;const bounds=getPolygonBounds(coordinates);if(!bounds)return console.warn("⚠️ Could not calculate bounds from coordinates"),null;const autoCenter={center:calculateAverageCenter(coordinates,bounds)};return console.log(`✅ Average-based center detected: [${autoCenter.center[0]}, ${autoCenter.center[1]}] from ${coordinates.length} properties`),setCachedAutoCenter(`${apiKey}-${method}`,autoCenter),autoCenter}catch(error){return console.error("❌ Auto-center detection failed:",error),null}};function MapListings({apiKey,mapboxToken,initialCenter,initialZoom,height="100%",width="100%",mapStyle="mapbox://styles/mapbox/streets-v12",centerCalculation="average"}){const mapContainer=(0,react.useRef)(null),map=(0,react.useRef)(null),[isLoading,setIsLoading]=(0,react.useState)(!1),[error,setError]=(0,react.useState)(null),[totalCount,setTotalCount]=(0,react.useState)(0),[mapCenter,setMapCenter]=(0,react.useState)(initialCenter||null),[mapZoom,setMapZoom]=(0,react.useState)(initialZoom||null),[isDetectingCenter,setIsDetectingCenter]=(0,react.useState)(!initialCenter);(0,react.useEffect)((()=>{(async()=>{if(mapCenter&&mapZoom)return;setIsDetectingCenter(!0);const cached=(apiKey=>{try{const cached=localStorage.getItem(`mapListings-autoCenter-${apiKey}`);if(cached){const data=JSON.parse(cached);if(Date.now()-data.timestamp<864e5)return{center:data.center}}}catch(error){console.warn("Failed to retrieve cached auto-center data:",error)}return null})(`${apiKey}-${centerCalculation}`);if(cached)return console.log(`📦 Using cached ${centerCalculation} auto-center data:`,cached),setMapCenter(cached.center),setMapZoom(initialZoom||10),void setIsDetectingCenter(!1);const detected=await detectAutoCenter(apiKey,centerCalculation);detected?(setMapCenter(detected.center),setMapZoom(initialZoom||10)):(console.log("🗺️ Using fallback center: Continental USA"),setMapCenter([-98.5795,39.8283]),setMapZoom(initialZoom||10)),setIsDetectingCenter(!1)})()}),[apiKey,mapCenter,mapZoom,centerCalculation,initialZoom]);const getClusterPrecision=(0,react.useCallback)((zoom=>zoom<=6?5:zoom<=8?8:zoom<=10?12:zoom<=12?16:zoom<=14?20:25),[]),boundsToPolygon=(0,react.useCallback)((bounds=>{const sw=bounds.getSouthWest(),ne=bounds.getNorthEast();return[[[sw.lng,sw.lat],[ne.lng,sw.lat],[ne.lng,ne.lat],[sw.lng,ne.lat],[sw.lng,sw.lat]]]}),[]),fetchClusters=(0,react.useCallback)((async bounds=>{if(!map.current)return;const zoom=map.current.getZoom(),precision=getClusterPrecision(zoom);console.log(`🔍 Fetching clusters - zoom: ${zoom.toFixed(1)}, precision: ${precision} (updated from legacy values for better cluster distribution)`),setIsLoading(!0),setError(null);try{var _data_aggregates_map,_data_aggregates;const url=new URL("https://api.repliers.io/listings");url.searchParams.set("cluster","true"),url.searchParams.set("clusterPrecision",precision.toString()),url.searchParams.set("clusterLimit","100"),url.searchParams.set("status","A"),url.searchParams.set("map",JSON.stringify(boundsToPolygon(bounds))),url.searchParams.set("key",apiKey),zoom>=13?(url.searchParams.set("listings","true"),url.searchParams.set("clusterFields","mlsNumber,listPrice,coordinates"),url.searchParams.set("pageSize","200")):url.searchParams.set("listings","false");const response=await fetch(url.toString(),{headers:{"REPLIERS-API-KEY":apiKey,"Content-Type":"application/json"}});if(!response.ok)throw new Error(`API Error: ${response.status} ${response.statusText}`);const data=await response.json();console.log("📊 API Response:",data);const clusters=(null===(_data_aggregates=data.aggregates)||void 0===_data_aggregates||null===(_data_aggregates_map=_data_aggregates.map)||void 0===_data_aggregates_map?void 0:_data_aggregates_map.clusters)||data.clusters||[],clusterFeatures=[],singlePropertyFeatures=[];clusters.forEach(((cluster,index)=>{var _cluster_location,_cluster_coordinates,_cluster_center,_cluster_location1,_cluster_coordinates1,_cluster_center1;const originalCoordinates=[(null===(_cluster_location=cluster.location)||void 0===_cluster_location?void 0:_cluster_location.longitude)||(null===(_cluster_coordinates=cluster.coordinates)||void 0===_cluster_coordinates?void 0:_cluster_coordinates.lng)||cluster.longitude||(null===(_cluster_center=cluster.center)||void 0===_cluster_center?void 0:_cluster_center.lng),(null===(_cluster_location1=cluster.location)||void 0===_cluster_location1?void 0:_cluster_location1.latitude)||(null===(_cluster_coordinates1=cluster.coordinates)||void 0===_cluster_coordinates1?void 0:_cluster_coordinates1.lat)||cluster.latitude||(null===(_cluster_center1=cluster.center)||void 0===_cluster_center1?void 0:_cluster_center1.lat)];if(1===cluster.count)singlePropertyFeatures.push({type:"Feature",properties:{mlsNumber:cluster.mlsNumber||`single-${index}`,listPrice:cluster.listPrice,propertyType:cluster.propertyType||cluster.status||"Sale",isProperty:!0},geometry:{type:"Point",coordinates:[originalCoordinates[0],originalCoordinates[1]]}});else{let clusterCoordinates=originalCoordinates;if(cluster.properties&&Array.isArray(cluster.properties)){const subCoords=[];if(cluster.properties.forEach((prop=>{const coord=extractCoordinates(prop);coord&&subCoords.push(coord)})),subCoords.length>0){const clusterBounds=getPolygonBounds(subCoords);if(clusterBounds){clusterCoordinates=calculateAverageCenter(subCoords,clusterBounds),console.log(`🎯 Adjusted cluster ${index} position for density (${subCoords.length} properties)`)}}}clusterFeatures.push({type:"Feature",properties:{count:cluster.count||1,precision:cluster.precision||precision,id:`cluster-${index}`},geometry:{type:"Point",coordinates:[clusterCoordinates[0],clusterCoordinates[1]]}})}}));const propertyFeatures=(data.listings||[]).map((listing=>{var _listing_coordinates,_listing_coordinates1;return{type:"Feature",properties:{mlsNumber:listing.mlsNumber,listPrice:listing.listPrice,propertyType:listing.propertyType||listing.status||"Sale",isProperty:!0},geometry:{type:"Point",coordinates:[(null===(_listing_coordinates=listing.coordinates)||void 0===_listing_coordinates?void 0:_listing_coordinates.lng)||listing.longitude,(null===(_listing_coordinates1=listing.coordinates)||void 0===_listing_coordinates1?void 0:_listing_coordinates1.lat)||listing.latitude]}}})),allFeatures=[...clusterFeatures,...singlePropertyFeatures,...propertyFeatures];console.log("🔧 Debug info:"),console.log("- Raw clusters from API:",clusters),console.log("- Processed cluster features:",clusterFeatures),console.log("- All features for map:",allFeatures);const source=map.current.getSource("listings");source?(source.setData({type:"FeatureCollection",features:allFeatures}),console.log("✅ Map source updated with",allFeatures.length,"features")):console.error("❌ Map source 'listings' not found");const total=data.count||clusterFeatures.reduce(((sum,feature)=>sum+feature.properties.count),0);setTotalCount(total),console.log(`✅ Loaded ${clusterFeatures.length} clusters, ${propertyFeatures.length} properties, ${total} total`)}catch(err){const errorMessage=err instanceof Error?err.message:"Failed to load listings";setError(errorMessage),console.error("❌ Fetch failed:",err)}finally{setIsLoading(!1)}}),[apiKey,getClusterPrecision,boundsToPolygon]);return(0,react.useEffect)((()=>{if(mapContainer.current&&!map.current&&mapCenter&&null!==mapZoom)return mapbox_gl_default().accessToken=mapboxToken,map.current=new(mapbox_gl_default().Map)({container:mapContainer.current,style:mapStyle,center:mapCenter,zoom:mapZoom}),map.current.on("load",(()=>{if(!map.current)return;map.current.addSource("listings",{type:"geojson",data:{type:"FeatureCollection",features:[]}}),map.current.addLayer({id:"clusters",type:"circle",source:"listings",filter:["has","count"],paint:{"circle-color":["step",["get","count"],"#51bbd6",50,"#f1c40f",500,"#f28cb1",1500,"#e74c3c"],"circle-radius":["step",["get","count"],10,50,14,500,18,1500,22],"circle-stroke-width":2,"circle-stroke-color":"#fff","circle-opacity":.8}}),map.current.addLayer({id:"cluster-count",type:"symbol",source:"listings",filter:["has","count"],layout:{"text-field":["get","count"],"text-font":["DIN Offc Pro Medium","Arial Unicode MS Bold"],"text-size":["step",["get","count"],10,50,12,500,14,1500,16]},paint:{"text-color":"#ffffff"}}),map.current.addLayer({id:"property-dots",type:"circle",source:"listings",filter:["has","isProperty"],paint:{"circle-color":"#374151","circle-radius":3,"circle-stroke-width":1,"circle-stroke-color":"#fff","circle-opacity":.9}}),map.current.addLayer({id:"price-text",type:"symbol",source:"listings",filter:["all",["has","isProperty"],["has","listPrice"]],layout:{"text-field":["case",["==",["get","propertyType"],"Lease"],["concat","$",["case",[">=",["get","listPrice"],1e3],["concat",["to-string",["round",["/",["get","listPrice"],1e3]]],"K"],["to-string",["get","listPrice"]]]],["concat","$",["case",[">=",["get","listPrice"],1e6],["concat",["to-string",["round",["/",["get","listPrice"],1e5]]],["case",["==",["%",["round",["/",["get","listPrice"],1e5]],10],0],"M",["concat",".",["to-string",["%",["round",["/",["get","listPrice"],1e5]],10]],"M"]]],[">=",["get","listPrice"],1e3],["concat",["to-string",["round",["/",["get","listPrice"],1e3]]],"K"],["to-string",["get","listPrice"]]]]],"text-font":["DIN Offc Pro Bold","Arial Unicode MS Bold"],"text-size":["interpolate",["linear"],["zoom"],13,10,16,12],"text-offset":[0,-1.5],"text-anchor":"bottom","symbol-sort-key":2},paint:{"text-color":"#ffffff","text-halo-color":["case",["==",["get","propertyType"],"Lease"],"#a855f7","#22c55e"],"text-halo-width":3,"text-opacity":1}}),map.current.on("click","clusters",(e=>{var _e_features,_feature_properties;if(!map.current||!(null===(_e_features=e.features)||void 0===_e_features?void 0:_e_features[0]))return;const feature=e.features[0],coordinates=feature.geometry.coordinates,currentZoom=(null===(_feature_properties=feature.properties)||void 0===_feature_properties||_feature_properties.count,map.current.getZoom()),targetZoom=Math.min(currentZoom+4,16);map.current.easeTo({center:coordinates,zoom:targetZoom,duration:1e3,easing:t=>t*(2-t)})}));const handlePropertyClick=e=>{var _e_features;if(!(null===(_e_features=e.features)||void 0===_e_features?void 0:_e_features[0]))return;const feature=e.features[0],properties=feature.properties,coordinates=feature.geometry.coordinates;(new(mapbox_gl_default().Popup)).setLngLat(coordinates).setHTML(`\n            <div style="padding: 8px;">\n              <strong>MLS: ${null==properties?void 0:properties.mlsNumber}</strong>\n              ${(null==properties?void 0:properties.listPrice)?`<br>Price: $${properties.listPrice.toLocaleString()}`:""}\n              ${(null==properties?void 0:properties.propertyType)?`<br>Type: ${properties.propertyType}`:""}\n            </div>\n          `).addTo(map.current)};map.current.on("click","property-dots",handlePropertyClick),map.current.on("click","price-text",handlePropertyClick),map.current.on("mouseenter","clusters",(()=>{map.current&&(map.current.getCanvas().style.cursor="pointer")})),map.current.on("mouseleave","clusters",(()=>{map.current&&(map.current.getCanvas().style.cursor="")})),map.current.on("mouseenter","property-dots",(()=>{map.current&&(map.current.getCanvas().style.cursor="pointer")})),map.current.on("mouseleave","property-dots",(()=>{map.current&&(map.current.getCanvas().style.cursor="")})),map.current.on("mouseenter","price-text",(()=>{map.current&&(map.current.getCanvas().style.cursor="pointer")})),map.current.on("mouseleave","price-text",(()=>{map.current&&(map.current.getCanvas().style.cursor="")}));const bounds=map.current.getBounds();bounds&&fetchClusters(bounds)})),map.current.on("moveend",(()=>{if(!map.current)return;const bounds=map.current.getBounds();bounds&&fetchClusters(bounds)})),()=>{map.current&&(map.current.remove(),map.current=null)}}),[mapboxToken,mapStyle,mapCenter,mapZoom,fetchClusters]),(0,jsx_runtime.jsxs)("div",{style:{width,height,position:"relative"},children:[(0,jsx_runtime.jsx)("div",{ref:mapContainer,style:{width:"100%",height:"100%"},className:"rounded-lg overflow-hidden"}),isDetectingCenter&&(0,jsx_runtime.jsx)("div",{style:{position:"absolute",top:"0",left:"0",right:"0",bottom:"0",backgroundColor:"rgba(255, 255, 255, 0.9)",display:"flex",alignItems:"center",justifyContent:"center",borderRadius:"6px",zIndex:1e3},children:(0,jsx_runtime.jsxs)("div",{style:{textAlign:"center"},children:[(0,jsx_runtime.jsx)("div",{style:{fontSize:"16px",fontWeight:"600",marginBottom:"8px",color:"#374151"},children:"Detecting optimal map center..."}),(0,jsx_runtime.jsx)("div",{style:{fontSize:"14px",color:"#6b7280"},children:"Analyzing property locations"})]})}),(0,jsx_runtime.jsx)("div",{style:{position:"absolute",top:"16px",right:"16px",backgroundColor:"rgba(255, 255, 255, 0.95)",padding:"8px 12px",borderRadius:"6px",boxShadow:"0 2px 8px rgba(0, 0, 0, 0.15)",fontSize:"14px",fontWeight:"600",color:"#374151"},children:isDetectingCenter?(0,jsx_runtime.jsx)("span",{style:{color:"#6b7280"},children:"Auto-centering..."}):isLoading?(0,jsx_runtime.jsx)("span",{style:{color:"#6b7280"},children:"Loading..."}):error?(0,jsx_runtime.jsx)("span",{style:{color:"#ef4444"},children:"Error"}):(0,jsx_runtime.jsxs)("span",{children:[totalCount.toLocaleString()," properties"]})}),error&&(0,jsx_runtime.jsx)("div",{style:{position:"absolute",bottom:"16px",left:"16px",right:"16px",backgroundColor:"#fef2f2",border:"1px solid #fecaca",borderRadius:"6px",padding:"12px",color:"#b91c1c",fontSize:"14px"},children:error})]})}MapListings.__docgenInfo={description:"MapListings Component\n\nA high-performance real estate map component that displays property listings\nusing server-side clustering from the Repliers API. Automatically adjusts\ncluster precision based on zoom level for optimal user experience.\n\nFeatures:\n- Server-side clustering for optimal performance\n- Zoom-based precision adjustment\n- Hierarchical cluster drilling\n- Minimal API calls\n- Property count display",methods:[],displayName:"MapListings",props:{apiKey:{required:!0,tsType:{name:"string"},description:"Repliers API key - required"},mapboxToken:{required:!0,tsType:{name:"string"},description:"MapBox access token - required"},initialCenter:{required:!1,tsType:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}]},description:"Initial map center coordinates [lng, lat] - auto-detects if not provided"},initialZoom:{required:!1,tsType:{name:"number"},description:"Initial zoom level - auto-calculates if not provided"},height:{required:!1,tsType:{name:"string"},description:"Map container height",defaultValue:{value:'"100%"',computed:!1}},width:{required:!1,tsType:{name:"string"},description:"Map container width",defaultValue:{value:'"100%"',computed:!1}},mapStyle:{required:!1,tsType:{name:"string"},description:"Map style",defaultValue:{value:'"mapbox://styles/mapbox/streets-v12"',computed:!1}},centerCalculation:{defaultValue:{value:'"average"',computed:!1},required:!1}}};const map_listings_stories={title:"Tutorials/Configuring the MapListings Component with the Repliers API (WIP)",component:MapListings,parameters:{layout:"fullscreen",docs:{page:()=>null}},argTypes:{apiKey:{control:"text",description:"Repliers API key (required)"},mapboxToken:{control:"text",description:"MapBox access token (required)"},initialCenter:{control:"object",description:"Initial map center coordinates [lng, lat]"},initialZoom:{control:{type:"range",min:1,max:20,step:1},description:"Initial zoom level"},height:{control:"text",description:"Map container height"},width:{control:"text",description:"Map container width"},mapStyle:{control:"select",options:["mapbox://styles/mapbox/streets-v12","mapbox://styles/mapbox/light-v11","mapbox://styles/mapbox/dark-v11","mapbox://styles/mapbox/satellite-v9","mapbox://styles/mapbox/satellite-streets-v12"],description:"MapBox map style"},centerCalculation:{control:"select",options:["average","city"],description:"Center calculation method: 'average' uses density-weighted center, 'city' finds busiest city"}}},SAMPLE_API_KEY="pxI19UMy9zfw9vz5lRxoGpjJWXrMnm",SAMPLE_MAPBOX_TOKEN="pk.eyJ1IjoibWlsYW5zb21hIiwiYSI6ImNtZWJrODZmajBwMWQya3B3cHE1M2Y3anoifQ.HMDLOc-6V9K3-mHKeTHHxw",Part1_BasicListings={args:{apiKey:SAMPLE_API_KEY,mapboxToken:SAMPLE_MAPBOX_TOKEN,centerCalculation:"average",initialZoom:8,height:"100vh",width:"100vw",mapStyle:"mapbox://styles/mapbox/streets-v12"},parameters:{docs:{description:{story:"\n🎯 **This is the main interactive demo!** This example demonstrates server-side clustering\nwith the Repliers API using the default 'average' center calculation method.\n\n**Cluster Precision Levels:**\n- **Zoom 6 and below**: Continental-level clusters (precision 3)\n- **Zoom 7-8**: State/Province-level clusters (precision 5)\n- **Zoom 9-10**: Metropolitan-level clusters (precision 8)\n- **Zoom 11-12**: City-level clusters (precision 12)\n- **Zoom 13-14**: District-level clusters (precision 16)\n- **Zoom 15+**: Street-level clusters (precision 20)\n\n**Center Calculation:**\nUses 'average' method by default - finds the densest area using a 20x20 grid analysis\nof 500 sample listings. Try switching the `centerCalculation` control to 'city' to\ncompare with the busiest city method.\n\n**Performance Features:**\n- Server-side clustering reduces data transfer\n- Only one API call per map movement\n- Cluster limit reduced to 100 for better distribution\n        "}}}},Part2_AverageCenter={args:{apiKey:"9F9oOgiUJylmCyRFzb8YkfLOpdcwkp",mapboxToken:SAMPLE_MAPBOX_TOKEN,centerCalculation:"city",initialZoom:10,height:"100vh",width:"100vw",mapStyle:"mapbox://styles/mapbox/streets-v12"},parameters:{docs:{description:{story:"\n🎯 **Average Center Calculation**\n\nThis method uses a 20x20 density grid to analyze 500 sample listings and finds the\ngeographic area with the highest concentration of properties.\n\n**How it works:**\n- Fetches 500 sample listings from your API key's dataset\n- Divides the area into a 400-cell grid (20x20)\n- Counts listings in each grid cell\n- Centers the map on the densest grid cell\n\n**Best for:**\n- Finding hotspots between multiple cities\n- Density-based centering regardless of city boundaries\n- When you want to focus on listing concentration patterns\n\n**Console output:** `📍 Density-weighted center: [-79.3832, 43.6532] (density: 0.42)`\n        "}}}},Part3_CityCenter={args:{apiKey:SAMPLE_API_KEY,mapboxToken:SAMPLE_MAPBOX_TOKEN,centerCalculation:"city",initialZoom:10,height:"100vh",width:"100vw",mapStyle:"mapbox://styles/mapbox/streets-v12"},parameters:{docs:{description:{story:"\n🏙️ **City Center Calculation**\n\nThis method uses the Repliers API city aggregates to identify the actual city\nwith the most listings and centers the map precisely on that city.\n\n**How it works:**\n- Calls `/listings?aggregates=address.city` to get city listing counts\n- Identifies the city with the highest number of listings\n- Calls `/listings?address.city=BusiestCity` to get coordinates\n- Centers the map on that city's location\n\n**Best for:**\n- Focusing on actual city centers with most activity\n- When you want to avoid centering between cities\n- Clear city-based geographic targeting\n\n**Example process:**\n1. 🏆 Busiest city: Toronto with 24,938 listings\n2. 🎯 City center for Toronto: [-79.3832, 43.6532]\n\n**Console output:** `🏆 Busiest city: Toronto with 24938 listings` → `🎯 City center for Toronto: [-79.3832, 43.6532]`\n        "}}}},Part4_FilteredSearch={args:{apiKey:SAMPLE_API_KEY,mapboxToken:SAMPLE_MAPBOX_TOKEN,centerCalculation:"average",initialCenter:[-98.5795,39.8283],initialZoom:4,height:"100vh",width:"100vw",mapStyle:"mapbox://styles/mapbox/streets-v12"},parameters:{docs:{disable:!0}}},__namedExportsOrder=["Part1_BasicListings","Part2_AverageCenter","Part3_CityCenter","Part4_FilteredSearch"];Part1_BasicListings.parameters={...Part1_BasicListings.parameters,docs:{...Part1_BasicListings.parameters?.docs,source:{originalSource:'{\n  args: {\n    apiKey: SAMPLE_API_KEY,\n    mapboxToken: SAMPLE_MAPBOX_TOKEN,\n    centerCalculation: "average",\n    initialZoom: 8,\n    height: "100vh",\n    width: "100vw",\n    mapStyle: "mapbox://styles/mapbox/streets-v12"\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: `\n🎯 **This is the main interactive demo!** This example demonstrates server-side clustering\nwith the Repliers API using the default \'average\' center calculation method.\n\n**Cluster Precision Levels:**\n- **Zoom 6 and below**: Continental-level clusters (precision 3)\n- **Zoom 7-8**: State/Province-level clusters (precision 5)\n- **Zoom 9-10**: Metropolitan-level clusters (precision 8)\n- **Zoom 11-12**: City-level clusters (precision 12)\n- **Zoom 13-14**: District-level clusters (precision 16)\n- **Zoom 15+**: Street-level clusters (precision 20)\n\n**Center Calculation:**\nUses \'average\' method by default - finds the densest area using a 20x20 grid analysis\nof 500 sample listings. Try switching the \\`centerCalculation\\` control to \'city\' to\ncompare with the busiest city method.\n\n**Performance Features:**\n- Server-side clustering reduces data transfer\n- Only one API call per map movement\n- Cluster limit reduced to 100 for better distribution\n        `\n      }\n    }\n  }\n}',...Part1_BasicListings.parameters?.docs?.source},description:{story:"**Part 1: Basic Map Listings Display**\n\nThis example shows the core functionality of displaying clustered real estate\nlistings on a map. Different API keys will show different datasets.\n\n**Try this:**\n1. Notice the large cluster numbers (hundreds/thousands of properties)\n2. Click any cluster to zoom in and see it break into smaller sub-clusters\n3. Continue drilling down until you reach individual blue property dots\n4. Click individual properties to see basic listing details\n5. Watch the property count update in the top-right corner",...Part1_BasicListings.parameters?.docs?.description}}},Part2_AverageCenter.parameters={...Part2_AverageCenter.parameters,docs:{...Part2_AverageCenter.parameters?.docs,source:{originalSource:'{\n  args: {\n    apiKey: "9F9oOgiUJylmCyRFzb8YkfLOpdcwkp",\n    mapboxToken: SAMPLE_MAPBOX_TOKEN,\n    centerCalculation: "city",\n    initialZoom: 10,\n    height: "100vh",\n    width: "100vw",\n    mapStyle: "mapbox://styles/mapbox/streets-v12"\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: `\n🎯 **Average Center Calculation**\n\nThis method uses a 20x20 density grid to analyze 500 sample listings and finds the\ngeographic area with the highest concentration of properties.\n\n**How it works:**\n- Fetches 500 sample listings from your API key\'s dataset\n- Divides the area into a 400-cell grid (20x20)\n- Counts listings in each grid cell\n- Centers the map on the densest grid cell\n\n**Best for:**\n- Finding hotspots between multiple cities\n- Density-based centering regardless of city boundaries\n- When you want to focus on listing concentration patterns\n\n**Console output:** \\`📍 Density-weighted center: [-79.3832, 43.6532] (density: 0.42)\\`\n        `\n      }\n    }\n  }\n}',...Part2_AverageCenter.parameters?.docs?.source},description:{story:"**Part 2: Average Center Calculation (Density-Weighted)**\n\nThis example demonstrates the 'average' center calculation method, which uses\na density grid approach to find the area with the highest concentration of\nlistings. This method is ideal for finding hotspots that might be between cities.",...Part2_AverageCenter.parameters?.docs?.description}}},Part3_CityCenter.parameters={...Part3_CityCenter.parameters,docs:{...Part3_CityCenter.parameters?.docs,source:{originalSource:'{\n  args: {\n    apiKey: SAMPLE_API_KEY,\n    mapboxToken: SAMPLE_MAPBOX_TOKEN,\n    centerCalculation: "city",\n    initialZoom: 10,\n    height: "100vh",\n    width: "100vw",\n    mapStyle: "mapbox://styles/mapbox/streets-v12"\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: `\n🏙️ **City Center Calculation**\n\nThis method uses the Repliers API city aggregates to identify the actual city\nwith the most listings and centers the map precisely on that city.\n\n**How it works:**\n- Calls \\`/listings?aggregates=address.city\\` to get city listing counts\n- Identifies the city with the highest number of listings\n- Calls \\`/listings?address.city=BusiestCity\\` to get coordinates\n- Centers the map on that city\'s location\n\n**Best for:**\n- Focusing on actual city centers with most activity\n- When you want to avoid centering between cities\n- Clear city-based geographic targeting\n\n**Example process:**\n1. 🏆 Busiest city: Toronto with 24,938 listings\n2. 🎯 City center for Toronto: [-79.3832, 43.6532]\n\n**Console output:** \\`🏆 Busiest city: Toronto with 24938 listings\\` → \\`🎯 City center for Toronto: [-79.3832, 43.6532]\\`\n        `\n      }\n    }\n  }\n}',...Part3_CityCenter.parameters?.docs?.source},description:{story:"**Part 3: City Center Calculation (Busiest City)**\n\nThis example demonstrates the 'city' center calculation method, which uses\ncity aggregates to find the actual city with the most listings and centers\nthe map on that specific city location.",...Part3_CityCenter.parameters?.docs?.description}}},Part4_FilteredSearch.parameters={...Part4_FilteredSearch.parameters,docs:{...Part4_FilteredSearch.parameters?.docs,source:{originalSource:'{\n  args: {\n    apiKey: SAMPLE_API_KEY,\n    mapboxToken: SAMPLE_MAPBOX_TOKEN,\n    centerCalculation: "average",\n    initialCenter: [-98.5795, 39.8283],\n    // Continental USA center\n    initialZoom: 4,\n    height: "100vh",\n    width: "100vw",\n    mapStyle: "mapbox://styles/mapbox/streets-v12"\n    // Note: These are placeholder props for future filter implementation\n    // minBedrooms: 2,\n    // maxPrice: 800000,\n    // propertyTypes: [\'residential\', \'condo\']\n  },\n  parameters: {\n    docs: {\n      disable: true // Hide from docs\n    }\n  }\n}',...Part4_FilteredSearch.parameters?.docs?.source},description:{story:"**Part 4: Custom Filters and Multi-Query Setup**\n\nThis placeholder demonstrates how the component could be extended with\nproperty filters (bedrooms, bathrooms, price range) and multi-query\nfunctionality for complex search scenarios.",...Part4_FilteredSearch.parameters?.docs?.description}}}}}]);