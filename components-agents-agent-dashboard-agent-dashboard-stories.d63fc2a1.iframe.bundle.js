/*! For license information please see components-agents-agent-dashboard-agent-dashboard-stories.d63fc2a1.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpocs=self.webpackChunkpocs||[]).push([[196],{"./src/components/agents/agent-dashboard/agent-dashboard.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CustomAPIKey:()=>CustomAPIKey,Step1_AgentDirectory:()=>Step1_AgentDirectory,__namedExportsOrder:()=>__namedExportsOrder,default:()=>agent_dashboard_stories});var jsx_runtime=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),search=__webpack_require__("./node_modules/lucide-react/dist/esm/icons/search.js"),loader_circle=__webpack_require__("./node_modules/lucide-react/dist/esm/icons/loader-circle.js"),circle_alert=__webpack_require__("./node_modules/lucide-react/dist/esm/icons/circle-alert.js"),createLucideIcon=__webpack_require__("./node_modules/lucide-react/dist/esm/createLucideIcon.js");const User=(0,createLucideIcon.Z)("user",[["path",{d:"M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2",key:"975kel"}],["circle",{cx:"12",cy:"7",r:"4",key:"17ys0d"}]]),TrendingUp=(0,createLucideIcon.Z)("trending-up",[["polyline",{points:"22 7 13.5 15.5 8.5 10.5 2 17",key:"126l90"}],["polyline",{points:"16 7 22 7 22 13",key:"kwv8wd"}]]),Building2=(0,createLucideIcon.Z)("building-2",[["path",{d:"M6 22V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v18Z",key:"1b4qmf"}],["path",{d:"M6 12H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2",key:"i71pzd"}],["path",{d:"M18 9h2a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-2",key:"10jefs"}],["path",{d:"M10 6h4",key:"1itunk"}],["path",{d:"M10 10h4",key:"tcdvrf"}],["path",{d:"M10 14h4",key:"kelpxr"}],["path",{d:"M10 18h4",key:"1ulq68"}]]);var console=__webpack_require__("./node_modules/console-browserify/index.js");function AgentDashboard({apiKey,className=""}){var _agents_find;const[agents,setAgents]=(0,react.useState)([]),[filteredAgents,setFilteredAgents]=(0,react.useState)([]),[isLoading,setIsLoading]=(0,react.useState)(!1),[error,setError]=(0,react.useState)(null),[selectedAgent,setSelectedAgent]=(0,react.useState)(null),[filterQuery,setFilterQuery]=(0,react.useState)(""),[sortBy,setSortBy]=(0,react.useState)("count"),[sortOrder,setSortOrder]=(0,react.useState)("desc");(0,react.useEffect)((()=>{apiKey&&loadAgentList()}),[apiKey]),(0,react.useEffect)((()=>{if(!filterQuery.trim())return void setFilteredAgents(agents);const filtered=agents.filter((agent=>agent.agentName.toLowerCase().includes(filterQuery.toLowerCase())));setFilteredAgents(filtered)}),[filterQuery,agents]),(0,react.useEffect)((()=>{const sorted=[...filteredAgents].sort(((a,b)=>{if("name"===sortBy){const comparison=a.agentName.localeCompare(b.agentName);return"asc"===sortOrder?comparison:-comparison}{const comparison=a.listingCount-b.listingCount;return"asc"===sortOrder?comparison:-comparison}}));setFilteredAgents(sorted)}),[sortBy,sortOrder]);const loadAgentList=async()=>{if(apiKey){setIsLoading(!0),setError(null);try{var _data_listings,_data_listings1;console.log("Fetching listings to build agent directory...");const url="https://api.repliers.io/listings?status=A&status=U&limit=1000&fields=agents",response=await fetch(url,{headers:{"REPLIERS-API-KEY":apiKey,"Content-Type":"application/json"}});if(!response.ok)throw 401===response.status?new Error("Invalid API key"):403===response.status?new Error("API key doesn't have permission for listings endpoint"):429===response.status?new Error("Too many requests. Please wait a moment"):new Error(`API Error: ${response.status} - ${response.statusText}`);const data=await response.json();console.log(`Fetched ${(null===(_data_listings=data.listings)||void 0===_data_listings?void 0:_data_listings.length)||0} listings`);const agentMap=new Map;null===(_data_listings1=data.listings)||void 0===_data_listings1||_data_listings1.forEach((listing=>{listing.agents&&Array.isArray(listing.agents)&&listing.agents.forEach((agent=>{if(agent.name){const currentCount=agentMap.get(agent.name)||0;agentMap.set(agent.name,currentCount+1)}}))})),console.log(`Found ${agentMap.size} unique agents`);const agentList=Array.from(agentMap.entries()).map((([name,count])=>({agentName:name,listingCount:count}))).filter((agent=>agent.agentName&&""!==agent.agentName.trim()));agentList.sort(((a,b)=>b.listingCount-a.listingCount)),console.log(`Displaying ${agentList.length} agents`,agentList.slice(0,5)),setAgents(agentList),setFilteredAgents(agentList)}catch(err){const errorMessage=err instanceof Error?err.message:"Failed to load agents";setError(errorMessage)}finally{setIsLoading(!1)}}else setError("API key is required")},toggleSort=field=>{sortBy===field?setSortOrder("asc"===sortOrder?"desc":"asc"):(setSortBy(field),setSortOrder("count"===field?"desc":"asc"))};return(0,jsx_runtime.jsxs)("div",{className:`w-full h-screen flex flex-col ${className}`,children:[(0,jsx_runtime.jsxs)("div",{className:"bg-white border-b border-gray-200 px-6 py-4",children:[(0,jsx_runtime.jsx)("h1",{className:"text-2xl font-bold text-gray-900",children:"Agent Performance Dashboard"}),(0,jsx_runtime.jsx)("p",{className:"text-sm text-gray-600 mt-1",children:"View all agents in your MLS with their listing counts and performance metrics"})]}),(0,jsx_runtime.jsxs)("div",{className:"flex-1 flex overflow-hidden",children:[(0,jsx_runtime.jsxs)("div",{className:"w-96 bg-white border-r border-gray-200 flex flex-col",children:[(0,jsx_runtime.jsxs)("div",{className:"p-4 border-b border-gray-200",children:[(0,jsx_runtime.jsxs)("div",{className:"flex items-center justify-between mb-3",children:[(0,jsx_runtime.jsx)("h2",{className:"text-lg font-semibold text-gray-900",children:"Agents"}),!isLoading&&agents.length>0&&(0,jsx_runtime.jsx)("span",{className:"text-sm text-gray-600 font-medium",children:filteredAgents.length})]}),!isLoading&&agents.length>0&&(0,jsx_runtime.jsxs)("div",{className:"relative flex items-center bg-gray-50 rounded-lg px-3 py-2 border border-gray-200 focus-within:border-blue-500 focus-within:ring-2 focus-within:ring-blue-200 transition-all",children:[(0,jsx_runtime.jsx)(search.Z,{className:"text-gray-400 w-4 h-4 mr-2"}),(0,jsx_runtime.jsx)("input",{type:"text",value:filterQuery,onChange:e=>setFilterQuery(e.target.value),placeholder:"Search agents...",className:"flex-grow bg-transparent outline-none text-sm text-gray-700 placeholder-gray-400"})]})]}),(0,jsx_runtime.jsxs)("div",{className:"flex-1 overflow-y-auto",children:[isLoading&&(0,jsx_runtime.jsxs)("div",{className:"flex flex-col items-center justify-center py-12 px-4",children:[(0,jsx_runtime.jsx)(loader_circle.Z,{className:"w-10 h-10 animate-spin text-blue-500 mb-3"}),(0,jsx_runtime.jsx)("p",{className:"text-sm text-gray-600",children:"Loading agents..."})]}),error&&!isLoading&&(0,jsx_runtime.jsx)("div",{className:"m-4",children:(0,jsx_runtime.jsxs)("div",{className:"flex items-start gap-2 text-red-600 bg-red-50 border border-red-200 rounded-lg p-3",children:[(0,jsx_runtime.jsx)(circle_alert.Z,{className:"w-4 h-4 mt-0.5 flex-shrink-0"}),(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("div",{className:"font-semibold text-sm",children:"Error loading agents"}),(0,jsx_runtime.jsx)("div",{className:"text-xs mt-1",children:error})]})]})}),!isLoading&&!error&&filteredAgents.length>0&&(0,jsx_runtime.jsx)("div",{className:"divide-y divide-gray-100",children:filteredAgents.map(((agent,index)=>(0,jsx_runtime.jsx)("button",{onClick:()=>{return agentName=agent.agentName,void setSelectedAgent(agentName);var agentName},className:"w-full p-4 text-left transition-colors hover:bg-gray-50 "+(selectedAgent===agent.agentName?"bg-blue-50 border-l-4 border-blue-500":"border-l-4 border-transparent"),children:(0,jsx_runtime.jsxs)("div",{className:"flex items-start gap-3",children:[(0,jsx_runtime.jsx)("div",{className:"w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0 "+(selectedAgent===agent.agentName?"bg-blue-500":"bg-gray-100"),children:(0,jsx_runtime.jsx)(User,{className:"w-5 h-5 "+(selectedAgent===agent.agentName?"text-white":"text-gray-600")})}),(0,jsx_runtime.jsxs)("div",{className:"flex-1 min-w-0",children:[(0,jsx_runtime.jsx)("div",{className:"font-medium text-gray-900 truncate",children:agent.agentName}),(0,jsx_runtime.jsxs)("div",{className:"flex items-center gap-1 mt-1",children:[(0,jsx_runtime.jsx)(TrendingUp,{className:"w-3 h-3 text-gray-400"}),(0,jsx_runtime.jsxs)("span",{className:"text-sm text-gray-600",children:[(0,jsx_runtime.jsx)("span",{className:"font-semibold",children:agent.listingCount})," listings"]})]})]})]})},`${agent.agentName}-${index}`)))}),!isLoading&&!error&&0===filteredAgents.length&&agents.length>0&&(0,jsx_runtime.jsxs)("div",{className:"text-center py-12 px-4",children:[(0,jsx_runtime.jsx)(search.Z,{className:"w-10 h-10 text-gray-400 mx-auto mb-3"}),(0,jsx_runtime.jsx)("h3",{className:"text-sm font-semibold text-gray-700 mb-1",children:"No agents found"}),(0,jsx_runtime.jsx)("p",{className:"text-xs text-gray-500",children:"Try adjusting your search"})]}),!isLoading&&!error&&0===agents.length&&(0,jsx_runtime.jsxs)("div",{className:"text-center py-12 px-4",children:[(0,jsx_runtime.jsx)("div",{className:"w-12 h-12 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-3",children:(0,jsx_runtime.jsx)(User,{className:"w-6 h-6 text-gray-400"})}),(0,jsx_runtime.jsx)("h3",{className:"text-sm font-semibold text-gray-700 mb-1",children:"No agents available"}),(0,jsx_runtime.jsx)("p",{className:"text-xs text-gray-500",children:"Check your API key"})]})]}),!isLoading&&agents.length>0&&(0,jsx_runtime.jsx)("div",{className:"p-3 border-t border-gray-200 bg-gray-50",children:(0,jsx_runtime.jsxs)("div",{className:"flex items-center gap-2 text-xs text-gray-600",children:[(0,jsx_runtime.jsx)("span",{children:"Sort by:"}),(0,jsx_runtime.jsxs)("button",{onClick:()=>toggleSort("name"),className:"px-2 py-1 rounded hover:bg-gray-200 transition-colors "+("name"===sortBy?"bg-gray-200 font-medium":""),children:["Name ","name"===sortBy&&("asc"===sortOrder?"↑":"↓")]}),(0,jsx_runtime.jsxs)("button",{onClick:()=>toggleSort("count"),className:"px-2 py-1 rounded hover:bg-gray-200 transition-colors "+("count"===sortBy?"bg-gray-200 font-medium":""),children:["Count ","count"===sortBy&&("asc"===sortOrder?"↑":"↓")]})]})})]}),(0,jsx_runtime.jsxs)("div",{className:"flex-1 bg-gray-50 overflow-y-auto",children:[!selectedAgent&&(0,jsx_runtime.jsx)("div",{className:"flex items-center justify-center h-full",children:(0,jsx_runtime.jsxs)("div",{className:"text-center px-4",children:[(0,jsx_runtime.jsx)("div",{className:"w-20 h-20 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-4",children:(0,jsx_runtime.jsx)(User,{className:"w-10 h-10 text-gray-400"})}),(0,jsx_runtime.jsx)("h3",{className:"text-lg font-semibold text-gray-700 mb-2",children:"No Agent Selected"}),(0,jsx_runtime.jsx)("p",{className:"text-gray-500 max-w-sm",children:"Select an agent from the list to view their performance dashboard and metrics"})]})}),selectedAgent&&(0,jsx_runtime.jsxs)("div",{className:"p-6",children:[(0,jsx_runtime.jsx)("div",{className:"bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6",children:(0,jsx_runtime.jsxs)("div",{className:"flex items-start justify-between",children:[(0,jsx_runtime.jsxs)("div",{className:"flex items-start gap-4",children:[(0,jsx_runtime.jsx)("div",{className:"w-16 h-16 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0",children:(0,jsx_runtime.jsx)(User,{className:"w-8 h-8 text-white"})}),(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("h2",{className:"text-2xl font-bold text-gray-900",children:selectedAgent}),(0,jsx_runtime.jsxs)("div",{className:"flex items-center gap-2 mt-2",children:[(0,jsx_runtime.jsx)(TrendingUp,{className:"w-4 h-4 text-gray-400"}),(0,jsx_runtime.jsxs)("span",{className:"text-sm text-gray-600",children:[(0,jsx_runtime.jsx)("span",{className:"font-semibold",children:(null===(_agents_find=agents.find((a=>a.agentName===selectedAgent)))||void 0===_agents_find?void 0:_agents_find.listingCount)||0})," ","total listings"]})]})]})]}),(0,jsx_runtime.jsx)("button",{onClick:()=>setSelectedAgent(null),className:"text-gray-400 hover:text-gray-600 transition-colors",children:(0,jsx_runtime.jsx)("svg",{className:"w-5 h-5",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",children:(0,jsx_runtime.jsx)("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M6 18L18 6M6 6l12 12"})})})]})}),(0,jsx_runtime.jsx)("div",{className:"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6",children:(0,jsx_runtime.jsxs)("div",{className:"flex items-start gap-3",children:[(0,jsx_runtime.jsx)("div",{className:"w-5 h-5 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5",children:(0,jsx_runtime.jsx)("svg",{className:"w-3 h-3 text-white",fill:"currentColor",viewBox:"0 0 20 20",children:(0,jsx_runtime.jsx)("path",{fillRule:"evenodd",d:"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z",clipRule:"evenodd"})})}),(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)("div",{className:"font-semibold text-blue-900 text-sm",children:"Step 1 Complete!"}),(0,jsx_runtime.jsx)("div",{className:"text-sm text-blue-700 mt-1",children:"Agent list loaded successfully. Next steps will load detailed profile, performance metrics, and auto-categorization."})]})]})}),(0,jsx_runtime.jsxs)("div",{className:"bg-white rounded-lg shadow-sm border border-gray-200 p-8 text-center",children:[(0,jsx_runtime.jsx)(Building2,{className:"w-12 h-12 text-gray-400 mx-auto mb-3"}),(0,jsx_runtime.jsx)("h3",{className:"text-lg font-semibold text-gray-700 mb-2",children:"More Details Coming Soon"}),(0,jsx_runtime.jsx)("p",{className:"text-gray-500 text-sm",children:"Agent profile, performance metrics, and categorization will appear here in the next steps"})]})]})]})]})]})}AgentDashboard.__docgenInfo={description:"Agent Performance Dashboard Component\n\n@description A comprehensive dashboard for viewing agent performance metrics,\nspecializations, and auto-generated categorizations based on their listing data.\n\nFeatures:\n- Agent search with autocomplete\n- Agent profile display\n- Performance metrics calculation\n- Auto-categorization (Luxury, Volume, Property Type specialists)\n- Listings breakdown and visualization\n\n@param props - The component props\n@returns JSX.Element",methods:[],displayName:"AgentDashboard",props:{apiKey:{required:!0,tsType:{name:"string"},description:"Repliers API key - required"},className:{required:!1,tsType:{name:"string"},description:"Optional className for custom styling",defaultValue:{value:'""',computed:!1}}}};const agent_dashboard_stories={title:"POCS/Agents/Agent Performance Dashboard",component:AgentDashboard,parameters:{layout:"fullscreen",docs:{description:{component:'\n## 🎯 Agent Performance Dashboard\n\nA comprehensive dashboard for viewing real estate agent performance metrics, specializations,\nand auto-generated categorizations based on their listing data.\n\nThis component was built as a proof-of-concept for TrustedOnly to help them:\n- Sync agent rosters and pre-provision user accounts\n- Categorize agents based on their specialties (luxury, property types, performance)\n- Connect vendors with the right agents based on data-driven categories\n- Provide a single homogenized view of agent data across multiple MLSs\n\n## 🚀 Features\n\n### Current (Step 1 - Testable)\n- **Agent Directory Loading**: Uses aggregates to load all agents from your MLS\n- **Listing Counts**: Shows total listing count (active + sold) for each agent\n- **Sortable Table**: Click column headers to sort by name or listing count\n- **Filter/Search**: Filter agents by name in real-time\n- **Agent Selection**: Select an agent to view their detailed dashboard\n\n### Coming Soon\n- Agent profile card with detailed information\n- Performance metrics (active vs sold, median prices, days on market)\n- Auto-categorization (Luxury, Volume, Property Type specialists)\n- Listings breakdown and visualizations\n- Geographic focus and market insights\n\n## 📖 How to Use\n\n1. **Component Loads Automatically**: On mount, fetches all agents using aggregates\n2. **View Agent List**: See all agents sorted by listing count (highest first)\n3. **Sort & Filter**:\n   - Click column headers to sort\n   - Use search box to filter by name\n4. **Select an Agent**: Click "View Details" to select an agent\n5. **Test Different Keys**: Use the Controls panel to test with different API keys\n\n## 🔑 API Key\n\nThe component requires a valid Repliers API key. You can:\n- Use the default sample key (for demo data)\n- Enter your own key via the Controls panel in Storybook\n- Pass it as a prop when using the component\n\n## 🛠️ Technical Details\n\n**API Approach:**\n\nSince the `agents` field is an array and cannot be aggregated directly using the aggregates parameter (attempting to do so returns a 400 error: "does not match any of the allowed types"), we use an alternative approach:\n\n1. Fetch up to 1000 listings with `fields=agents` to minimize data transfer\n2. Manually extract unique agents from the `agents[]` array in each listing\n3. Count listing occurrences for each agent\n4. Build the agent directory from this processed data\n\n**API Endpoints Used:**\n- `/listings?status=A&status=U&limit=1000&fields=agents` - Fetch listings to build agent directory\n- More endpoints will be added in future steps (individual agent details, stats, etc.)\n\n**Note:** This approach works well for MLSs with moderate listing counts. For very large datasets (10,000+ listings), consider implementing pagination or using alternative filtering strategies.\n\n**Props:**\n- `apiKey` (required): Your Repliers API key\n- `className` (optional): Additional CSS classes\n\n## 🧪 Testing Progress\n\n- ✅ **Step 1**: Agent search with autocomplete - **READY TO TEST**\n- ⏳ **Step 2**: Agent profile display\n- ⏳ **Step 3**: Listings counts\n- ⏳ **Step 4**: Performance metrics\n- ⏳ **Step 5**: Auto-categorization\n- ⏳ **Step 6**: Visualizations\n        '}}},argTypes:{apiKey:{control:"text",description:"Your Repliers API key (required)",table:{type:{summary:"string"},defaultValue:{summary:"pxI19UMy9zfw9vz5lRxoGpjJWXrMnm"}}},className:{control:"text",description:"Additional CSS classes for custom styling",table:{type:{summary:"string"}}}},tags:["autodocs"]},Step1_AgentDirectory={args:{apiKey:"pxI19UMy9zfw9vz5lRxoGpjJWXrMnm"},parameters:{docs:{description:{story:'\n🎯 **This is the current interactive demo!**\n\n**Step 1 is complete and ready to test.** The component uses the aggregates API to load all agents with their listing counts.\n\n**What to test:**\n1. Component loads automatically on mount\n2. Agent table displays with listing counts\n3. Sort by clicking column headers\n4. Filter agents using the search box\n5. Select an agent by clicking "View Details"\n6. Verify the selected agent confirmation appears below\n\n**API Implementation Note:**\nThe component fetches listings and manually extracts agents from the `agents[]` array since the aggregates parameter doesn\'t support array fields.\n\n**What the API returns:**\nEach listing contains an `agents` array with agent objects including:\n- `agentId`, `name`, `email`, `phones`\n- `brokerage` information (name, address)\n- `officeId` and other metadata\n\nThe component processes this data to build the agent directory with listing counts.\n\nUse the Controls panel to test with different API keys!\n        '}}}},CustomAPIKey={args:{apiKey:""},parameters:{docs:{description:{story:'\nUse this variant to test with your own Repliers API key.\n\n1. Open the Controls panel below\n2. Enter your API key in the "apiKey" field\n3. Start searching for agents\n\nThis is useful for testing with your specific MLS data.\n        '}}}},__namedExportsOrder=["Step1_AgentDirectory","CustomAPIKey"];Step1_AgentDirectory.parameters={...Step1_AgentDirectory.parameters,docs:{...Step1_AgentDirectory.parameters?.docs,source:{originalSource:'{\n  args: {\n    apiKey: SAMPLE_API_KEY\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: `\n🎯 **This is the current interactive demo!**\n\n**Step 1 is complete and ready to test.** The component uses the aggregates API to load all agents with their listing counts.\n\n**What to test:**\n1. Component loads automatically on mount\n2. Agent table displays with listing counts\n3. Sort by clicking column headers\n4. Filter agents using the search box\n5. Select an agent by clicking "View Details"\n6. Verify the selected agent confirmation appears below\n\n**API Implementation Note:**\nThe component fetches listings and manually extracts agents from the \\`agents[]\\` array since the aggregates parameter doesn\'t support array fields.\n\n**What the API returns:**\nEach listing contains an \\`agents\\` array with agent objects including:\n- \\`agentId\\`, \\`name\\`, \\`email\\`, \\`phones\\`\n- \\`brokerage\\` information (name, address)\n- \\`officeId\\` and other metadata\n\nThe component processes this data to build the agent directory with listing counts.\n\nUse the Controls panel to test with different API keys!\n        `\n      }\n    }\n  }\n}',...Step1_AgentDirectory.parameters?.docs?.source},description:{story:"**Step 1: Agent Directory with Aggregates (Currently Testable)**\n\nThis is the main interactive demo showing the agent directory loaded using aggregates.\nThe component automatically loads all agents on mount.\n\n**What's Working:**\n- Aggregates-based agent loading (all agents in MLS)\n- Listing counts for each agent\n- Sortable table (by name or count)\n- Real-time filtering\n- Agent selection\n- Error handling for invalid API keys\n\n**Try these interactions:**\n1. Watch the agent list load automatically\n2. Click column headers to sort\n3. Use the search box to filter by name\n4. Click \"View Details\" to select an agent\n5. View the selected agent confirmation\n\n**Next Steps:**\nOnce an agent is selected, we'll load their:\n- Full profile details (using /members endpoint)\n- Active vs Sold listing breakdown\n- Performance metrics (median price, days on market)\n- Auto-generated specialization tags",...Step1_AgentDirectory.parameters?.docs?.description}}},CustomAPIKey.parameters={...CustomAPIKey.parameters,docs:{...CustomAPIKey.parameters?.docs,source:{originalSource:'{\n  args: {\n    apiKey: ""\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: `\nUse this variant to test with your own Repliers API key.\n\n1. Open the Controls panel below\n2. Enter your API key in the "apiKey" field\n3. Start searching for agents\n\nThis is useful for testing with your specific MLS data.\n        `\n      }\n    }\n  }\n}',...CustomAPIKey.parameters?.docs?.source},description:{story:"**Custom API Key**\n\nUse this story variant to test with your own API key.\nEdit the apiKey prop in the Controls panel below.",...CustomAPIKey.parameters?.docs?.description}}}},"./node_modules/lucide-react/dist/esm/createLucideIcon.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>createLucideIcon});var react=__webpack_require__("./node_modules/next/dist/compiled/react/index.js");const toPascalCase=string=>{const camelCase=(string=>string.replace(/^([A-Z])|[\s-_]+(\w)/g,((match,p1,p2)=>p2?p2.toUpperCase():p1.toLowerCase())))(string);return camelCase.charAt(0).toUpperCase()+camelCase.slice(1)},mergeClasses=(...classes)=>classes.filter(((className,index,array)=>Boolean(className)&&""!==className.trim()&&array.indexOf(className)===index)).join(" ").trim(),hasA11yProp=props=>{for(const prop in props)if(prop.startsWith("aria-")||"role"===prop||"title"===prop)return!0};var defaultAttributes={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};const Icon=(0,react.forwardRef)((({color="currentColor",size=24,strokeWidth=2,absoluteStrokeWidth,className="",children,iconNode,...rest},ref)=>(0,react.createElement)("svg",{ref,...defaultAttributes,width:size,height:size,stroke:color,strokeWidth:absoluteStrokeWidth?24*Number(strokeWidth)/Number(size):strokeWidth,className:mergeClasses("lucide",className),...!children&&!hasA11yProp(rest)&&{"aria-hidden":"true"},...rest},[...iconNode.map((([tag,attrs])=>(0,react.createElement)(tag,attrs))),...Array.isArray(children)?children:[children]]))),createLucideIcon=(iconName,iconNode)=>{const Component=(0,react.forwardRef)((({className,...props},ref)=>{return(0,react.createElement)(Icon,{ref,iconNode,className:mergeClasses(`lucide-${string=toPascalCase(iconName),string.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase()}`,`lucide-${iconName}`,className),...props});var string}));return Component.displayName=toPascalCase(iconName),Component}},"./node_modules/lucide-react/dist/esm/icons/circle-alert.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>CircleAlert});const CircleAlert=(0,__webpack_require__("./node_modules/lucide-react/dist/esm/createLucideIcon.js").Z)("circle-alert",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["line",{x1:"12",x2:"12",y1:"8",y2:"12",key:"1pkeuh"}],["line",{x1:"12",x2:"12.01",y1:"16",y2:"16",key:"4dfq90"}]])},"./node_modules/lucide-react/dist/esm/icons/loader-circle.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>LoaderCircle});const LoaderCircle=(0,__webpack_require__("./node_modules/lucide-react/dist/esm/createLucideIcon.js").Z)("loader-circle",[["path",{d:"M21 12a9 9 0 1 1-6.219-8.56",key:"13zald"}]])},"./node_modules/lucide-react/dist/esm/icons/search.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>Search});const Search=(0,__webpack_require__("./node_modules/lucide-react/dist/esm/createLucideIcon.js").Z)("search",[["path",{d:"m21 21-4.34-4.34",key:"14j7rj"}],["circle",{cx:"11",cy:"11",r:"8",key:"4ej97u"}]])}}]);