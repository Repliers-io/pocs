"use strict";(self.webpackChunkpocs=self.webpackChunkpocs||[]).push([[272],{"./src/components/map-listings/map-listings.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Part1_BasicListings:()=>Part1_BasicListings,Part2_LargestClusterCenter:()=>Part2_LargestClusterCenter,Part3_MapStyles:()=>Part3_MapStyles,Part4_FilteredSearch:()=>Part4_FilteredSearch,__namedExportsOrder:()=>__namedExportsOrder,default:()=>map_listings_stories});var jsx_runtime=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),mapbox_gl=__webpack_require__("./node_modules/mapbox-gl/dist/mapbox-gl.js"),mapbox_gl_default=__webpack_require__.n(mapbox_gl),x=(__webpack_require__("./node_modules/mapbox-gl/dist/mapbox-gl.css"),__webpack_require__("./node_modules/lucide-react/dist/esm/icons/x.js")),bed_double=__webpack_require__("./node_modules/lucide-react/dist/esm/icons/bed-double.js"),bath=__webpack_require__("./node_modules/lucide-react/dist/esm/icons/bath.js"),car=__webpack_require__("./node_modules/lucide-react/dist/esm/icons/car.js");function PropertyPreviewModal({open,onClose,listing,onViewDetails}){var _listing_images,_listing_details;if((0,react.useEffect)((()=>{const handleEscape=e=>{"Escape"===e.key&&onClose()};return open&&(document.addEventListener("keydown",handleEscape),document.body.style.overflow="hidden"),()=>{document.removeEventListener("keydown",handleEscape),document.body.style.overflow="unset"}}),[open,onClose]),!open||!listing)return null;const StatusTag=({type,lastStatus})=>{const label=((type,lastStatus)=>"New"===lastStatus||"Pc"===lastStatus||"Ext"===lastStatus?"Sale"===type?"For Sale":"Lease"===type?"For Lease":type||null:lastStatus?{Sus:"Suspended",Exp:"Expired",Sld:"Sold",Ter:"Terminated",Dft:"Deal Fell Through",Lsd:"Leased",Sc:"Sold Conditionally",Sce:"Sold Conditionally (Escape Clause)",Lc:"Leased Conditionally",Cs:"Coming Soon"}[lastStatus]||lastStatus:null)(type,lastStatus);if(!label)return null;let style="bg-green-100 text-green-600";switch(label){case"For Sale":case"For Lease":style="bg-green-100 text-green-600";break;case"Sold":style="bg-blue-100 text-blue-600";break;case"Leased":style="bg-purple-100 text-purple-600";break;case"Sold Conditionally":case"Sold Conditionally (Escape Clause)":case"Leased Conditionally":style="bg-amber-100 text-amber-600";break;case"Coming Soon":style="bg-indigo-100 text-indigo-600";break;case"Suspended":style="bg-orange-100 text-orange-600";break;case"Expired":default:style="bg-gray-100 text-gray-500";break;case"Terminated":case"Deal Fell Through":style="bg-red-100 text-red-600"}return(0,jsx_runtime.jsx)("span",{className:`text-xs px-2 py-1 rounded-md font-medium ${style}`,children:label})};return(0,jsx_runtime.jsx)("div",{className:"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50",onClick:onClose,children:(0,jsx_runtime.jsxs)("div",{className:"bg-white rounded-xl shadow-lg w-full max-w-md mx-4 max-h-[90vh] overflow-hidden",onClick:e=>e.stopPropagation(),role:"dialog","aria-labelledby":"property-preview-title","aria-describedby":"property-preview-description",children:[(0,jsx_runtime.jsxs)("div",{className:"flex items-center justify-between p-4 border-b border-gray-100",children:[(0,jsx_runtime.jsx)("h2",{id:"property-preview-title",className:"text-lg font-semibold text-gray-800",children:"Property Details"}),(0,jsx_runtime.jsx)("button",{onClick:onClose,className:"p-1 hover:bg-gray-100 rounded-full transition-colors","aria-label":"Close modal",children:(0,jsx_runtime.jsx)(x.Z,{className:"w-4 h-4 text-gray-500"})})]}),(0,jsx_runtime.jsxs)("div",{className:"p-4",id:"property-preview-description",children:[(0,jsx_runtime.jsxs)("div",{className:"flex items-center gap-4",children:[(0,jsx_runtime.jsx)("div",{className:"w-24 h-16 bg-gray-100 rounded-md overflow-hidden flex-shrink-0",children:(null===(_listing_images=listing.images)||void 0===_listing_images?void 0:_listing_images[0])?(0,jsx_runtime.jsx)("img",{src:`https://cdn.repliers.io/${listing.images[0]}?class=small`,alt:"Property",className:"object-cover w-full h-full"}):(0,jsx_runtime.jsx)("div",{className:"flex items-center justify-center h-full text-xs text-gray-400",children:"No Image"})}),(0,jsx_runtime.jsxs)("div",{className:"flex-grow min-w-0",children:[(0,jsx_runtime.jsxs)("div",{className:"flex justify-between items-start mb-2",children:[(0,jsx_runtime.jsxs)("div",{className:"flex items-center gap-2 min-w-0",children:[(0,jsx_runtime.jsx)("h3",{className:"font-semibold text-base text-gray-800 truncate",children:listing.listPrice?(price=listing.listPrice,new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",minimumFractionDigits:0,maximumFractionDigits:0}).format(price)):"Price N/A"}),(0,jsx_runtime.jsx)("span",{className:"text-gray-400",children:"|"}),(0,jsx_runtime.jsx)("span",{className:"text-sm text-gray-600 truncate",children:listing.mlsNumber})]}),(0,jsx_runtime.jsx)("div",{className:"flex-shrink-0 ml-2",children:(0,jsx_runtime.jsx)(StatusTag,{type:listing.type,lastStatus:listing.lastStatus})})]}),(0,jsx_runtime.jsx)("p",{className:"text-xs text-gray-600 mb-2 leading-relaxed",children:(address=>{if(!address)return"Address not available";return[[address.streetNumber,address.streetDirection,address.streetName,address.streetSuffix].filter(Boolean).join(" "),[address.city,address.state].filter(Boolean).join(", ")].filter(Boolean).join(", ")})(listing.address)}),(0,jsx_runtime.jsxs)("div",{className:"flex items-center text-xs text-gray-500 space-x-3 flex-wrap",children:[(0,jsx_runtime.jsxs)("span",{className:"flex items-center gap-1",children:[(0,jsx_runtime.jsx)(bed_double.Z,{className:"w-4 h-4"}),(details=>{if(!details)return"N/A";const total=details.numBedrooms,plus=details.numBedroomsPlus;return total&&plus&&plus>0?`${total} + ${plus}`:(null==total?void 0:total.toString())||"N/A"})(listing.details)," Bedroom"]}),(0,jsx_runtime.jsxs)("span",{className:"flex items-center gap-1",children:[(0,jsx_runtime.jsx)(bath.Z,{className:"w-4 h-4"}),(details=>{if(!details)return"N/A";const total=details.numBathrooms,plus=details.numBathroomsPlus;return total&&plus&&plus>0?`${total} + ${plus}`:(null==total?void 0:total.toString())||"N/A"})(listing.details)," Bath"]}),(0,jsx_runtime.jsxs)("span",{className:"flex items-center gap-1",children:[(0,jsx_runtime.jsx)(car.Z,{className:"w-4 h-4"}),(details=listing.details,details&&(null===(_details_numGarageSpaces=details.numGarageSpaces)||void 0===_details_numGarageSpaces?void 0:_details_numGarageSpaces.toString())||"N/A")," Garage"]}),(null===(_listing_details=listing.details)||void 0===_listing_details?void 0:_listing_details.propertyType)&&(0,jsx_runtime.jsxs)("span",{children:["| ",listing.details.propertyType]})]})]})]}),(0,jsx_runtime.jsx)("div",{className:"mt-4 pt-3 border-t border-gray-100",children:(0,jsx_runtime.jsx)("button",{onClick:()=>{onViewDetails&&onViewDetails(listing.mlsNumber),onClose()},className:"w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200 text-sm",children:"View Full Details"})})]})]})});var details,_details_numGarageSpaces,price}PropertyPreviewModal.__docgenInfo={description:"",methods:[],displayName:"PropertyPreviewModal",props:{open:{required:!0,tsType:{name:"boolean"},description:""},onClose:{required:!0,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:""},listing:{required:!0,tsType:{name:"union",raw:"ListingResult | null",elements:[{name:"ListingResult"},{name:"null"}]},description:""},onViewDetails:{required:!1,tsType:{name:"signature",type:"function",raw:"(mlsNumber: string) => void",signature:{arguments:[{type:{name:"string"},name:"mlsNumber"}],return:{name:"void"}}},description:""}}};var console=__webpack_require__("./node_modules/console-browserify/index.js");const extractCoordinates=listing=>{var _listing_coordinates,_listing_coordinates1,_listing_map,_listing_map1,_listing_location,_listing_location1,_listing_center,_listing_center1;return(null===(_listing_coordinates=listing.coordinates)||void 0===_listing_coordinates?void 0:_listing_coordinates.lat)&&(null===(_listing_coordinates1=listing.coordinates)||void 0===_listing_coordinates1?void 0:_listing_coordinates1.lng)?{lat:listing.coordinates.lat,lng:listing.coordinates.lng}:listing.latitude&&listing.longitude?{lat:listing.latitude,lng:listing.longitude}:(null===(_listing_map=listing.map)||void 0===_listing_map?void 0:_listing_map.latitude)&&(null===(_listing_map1=listing.map)||void 0===_listing_map1?void 0:_listing_map1.longitude)?{lat:listing.map.latitude,lng:listing.map.longitude}:(null===(_listing_location=listing.location)||void 0===_listing_location?void 0:_listing_location.latitude)&&(null===(_listing_location1=listing.location)||void 0===_listing_location1?void 0:_listing_location1.longitude)?{lat:listing.location.latitude,lng:listing.location.longitude}:(null===(_listing_center=listing.center)||void 0===_listing_center?void 0:_listing_center.lat)&&(null===(_listing_center1=listing.center)||void 0===_listing_center1?void 0:_listing_center1.lng)?{lat:listing.center.lat,lng:listing.center.lng}:null},getPolygonBounds=coordinates=>{if(0===coordinates.length)return null;let north=coordinates[0].lat,south=coordinates[0].lat,east=coordinates[0].lng,west=coordinates[0].lng;return coordinates.forEach((coord=>{north=Math.max(north,coord.lat),south=Math.min(south,coord.lat),east=Math.max(east,coord.lng),west=Math.min(west,coord.lng)})),{north,south,east,west}},calculateAverageCenter=(coordinates,bounds)=>{const{north,south,east,west}=bounds,latStep=(north-south)/20,lngStep=(east-west)/20,densityGrid=Array(20).fill(0).map((()=>Array(20).fill(0)));coordinates.forEach((coord=>{const latIndex=Math.floor((coord.lat-south)/latStep),lngIndex=Math.floor((coord.lng-west)/lngStep),safeLatIndex=Math.max(0,Math.min(19,latIndex)),safeLngIndex=Math.max(0,Math.min(19,lngIndex));densityGrid[safeLatIndex][safeLngIndex]++}));let maxDensity=0,densestLat=0,densestLng=0;for(let i=0;i<20;i++)for(let j=0;j<20;j++)densityGrid[i][j]>maxDensity&&(maxDensity=densityGrid[i][j],densestLat=south+(i+.5)*latStep,densestLng=west+(j+.5)*lngStep);const center=maxDensity>0?[densestLng,densestLat]:[(east+west)/2,(north+south)/2],densityRatio=maxDensity/coordinates.length;return console.log(`📍 Density-weighted center: [${center[0].toFixed(4)}, ${center[1].toFixed(4)}] (density: ${densityRatio.toFixed(2)})`),center},setCachedAutoCenter=(apiKey,data)=>{try{const cacheData={...data,timestamp:Date.now()};localStorage.setItem(`mapListings-autoCenter-${apiKey}`,JSON.stringify(cacheData))}catch(error){console.warn("Failed to cache auto-center data:",error)}};function MapListings({apiKey,mapboxToken,initialCenter,initialZoom,height="100%",width="100%",mapStyle="mapbox://styles/mapbox/streets-v12",centerCalculation="average"}){const mapContainer=(0,react.useRef)(null),map=(0,react.useRef)(null),[error,setError]=(0,react.useState)(null),[totalCount,setTotalCount]=(0,react.useState)(0),[mapCenter,setMapCenter]=(0,react.useState)(initialCenter||null),[mapZoom,setMapZoom]=(0,react.useState)(initialZoom||null),currentZoomLevel=(0,react.useRef)(null),lastFetchParams=(0,react.useRef)(null),[modalOpen,setModalOpen]=(0,react.useState)(!1),[selectedListing,setSelectedListing]=(0,react.useState)(null),priceMarkers=(0,react.useRef)([]),formatPrice=(0,react.useCallback)(((price,type)=>{const formatToMaxDigits=(value,suffix)=>value>=100?`${Math.round(value)}${suffix}`:value>=10?`${Math.round(10*value)/10}${suffix}`:`${Math.round(100*value)/100}${suffix}`;if("Lease"===type){if(price>=1e3){return formatToMaxDigits(price/1e3,"K")}return price.toString()}if(price>=1e6){return formatToMaxDigits(price/1e6,"M")}if(price>=1e3){return formatToMaxDigits(price/1e3,"K")}return price.toString()}),[]),createPriceBubble=(0,react.useCallback)(((price,type)=>{const formattedPrice=formatPrice(price,type),isLease="Lease"===type,bubble=document.createElement("div");return bubble.style.cssText=`\n      background-color: ${isLease?"#a855f7":"#22c55e"};\n      color: white;\n      padding: 4px 8px;\n      border-radius: 4px;\n      font-size: 11px;\n      font-weight: 600;\n      font-family: -apple-system, BlinkMacSystemFont, sans-serif;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      white-space: nowrap;\n      pointer-events: auto;\n      cursor: pointer;\n    `,bubble.textContent=formattedPrice,bubble}),[formatPrice]),clearPriceMarkers=(0,react.useCallback)((()=>{priceMarkers.current.forEach((marker=>marker.remove())),priceMarkers.current=[]}),[]),addPriceMarkers=(0,react.useCallback)((features=>{map.current&&(clearPriceMarkers(),features.forEach((feature=>{if("isProperty"in feature.properties&&feature.properties.isProperty&&feature.properties.listPrice){const{listPrice}=feature.properties,type=feature.properties.type||"Sale",[lng,lat]=feature.geometry.coordinates;if(isNaN(lng)||isNaN(lat)||null===lng||null===lat)return void console.warn(`⚠️ Invalid coordinates for property ${feature.properties.mlsNumber}: [${lng}, ${lat}]`);const numericPrice="string"==typeof listPrice?parseFloat(listPrice):listPrice;if(isNaN(numericPrice))return void console.warn(`⚠️ Invalid price for property ${feature.properties.mlsNumber}: ${listPrice}`);const bubble=createPriceBubble(numericPrice,type);console.log(`💰 Creating marker for ${feature.properties.mlsNumber}:`,{price:numericPrice,type,coordinates:[lng,lat],isLease:"Lease"===type});const marker=new(mapbox_gl_default().Marker)({element:bubble,anchor:"bottom",offset:[0,-5]}).setLngLat([lng,lat]).addTo(map.current);bubble.addEventListener("click",(async()=>{if(console.log("🖱️ Price bubble clicked for",feature.properties.mlsNumber),feature.properties.address&&feature.properties.images){console.log("✅ Using cached enhanced data");const listing={mlsNumber:feature.properties.mlsNumber||"N/A",listPrice:numericPrice,address:feature.properties.address,details:feature.properties.details,images:feature.properties.images,type:feature.properties.type,lastStatus:feature.properties.lastStatus,status:feature.properties.status};return console.log("📤 Setting modal data:",listing),setSelectedListing(listing),setModalOpen(!0),void console.log("📂 Modal should now be open")}console.log("🔄 Fetching enhanced property details...");try{var _data_listings;const response=await fetch(`https://api.repliers.io/listings?mlsNumber=${feature.properties.mlsNumber}&fields=address.*,details.*,images,type,lastStatus,status,class`,{headers:{"REPLIERS-API-KEY":apiKey,"Content-Type":"application/json"}});if(!response.ok)throw new Error(`Failed to fetch property details: ${response.status}`);const propertyData=null===(_data_listings=(await response.json()).listings)||void 0===_data_listings?void 0:_data_listings[0];if(propertyData){console.log("✅ Enhanced property data loaded:",propertyData);const listing={mlsNumber:feature.properties.mlsNumber||"N/A",listPrice:numericPrice,address:propertyData.address,details:propertyData.details,images:propertyData.images,type:propertyData.type||feature.properties.type,lastStatus:propertyData.lastStatus,status:propertyData.status};setSelectedListing(listing),setModalOpen(!0)}else{console.warn("⚠️ No property data found, using basic info");const listing={mlsNumber:feature.properties.mlsNumber||"N/A",listPrice:numericPrice,address:feature.properties.address,details:feature.properties.details,images:feature.properties.images,type:feature.properties.type,lastStatus:feature.properties.lastStatus,status:feature.properties.status};setSelectedListing(listing),setModalOpen(!0)}}catch(error){console.error("❌ Failed to fetch enhanced property details:",error);const listing={mlsNumber:feature.properties.mlsNumber||"N/A",listPrice:numericPrice,address:feature.properties.address,details:feature.properties.details,images:feature.properties.images,type:feature.properties.type,lastStatus:feature.properties.lastStatus,status:feature.properties.status};console.log("📤 Setting modal data:",listing),setSelectedListing(listing),setModalOpen(!0),console.log("📂 Modal should now be open")}})),priceMarkers.current.push(marker)}})),console.log(`✅ Added ${priceMarkers.current.length} price markers`))}),[clearPriceMarkers,createPriceBubble,apiKey]);(0,react.useEffect)((()=>{(async()=>{if(mapCenter&&mapZoom)return;const cached=(apiKey=>{try{const cached=localStorage.getItem(`mapListings-autoCenter-${apiKey}`);if(cached){const data=JSON.parse(cached);if(Date.now()-data.timestamp<864e5)return{center:data.center}}}catch(error){console.warn("Failed to retrieve cached auto-center data:",error)}return null})(`${apiKey}-${centerCalculation}`);if(cached)return console.log(`📦 Using cached ${centerCalculation} auto-center data:`,cached),setMapCenter(cached.center),void setMapZoom(initialZoom||10);const detected=await(async(apiKey,method="average")=>{try{var _clusterData_aggregates_map,_clusterData_aggregates;console.log(`🎯 Auto-detecting map center using ${method} method with bundled search...`);const bundledQuery={queries:[{cluster:!0,clusterPrecision:8,clusterLimit:50,status:"A"},{cluster:!1,listings:!0,pageSize:500,status:"A"}]},response=await fetch("https://api.repliers.io/listings",{method:"POST",headers:{"REPLIERS-API-KEY":apiKey,"Content-Type":"application/json"},body:JSON.stringify(bundledQuery)});if(!response.ok)throw new Error(`Bundled auto-center API Error: ${response.status} ${response.statusText}`);const data=await response.json();console.log("📊 Bundled response:",data);const clusterData=data[0]||{},listingData=data[1]||{},clusters=(null===(_clusterData_aggregates=clusterData.aggregates)||void 0===_clusterData_aggregates||null===(_clusterData_aggregates_map=_clusterData_aggregates.map)||void 0===_clusterData_aggregates_map?void 0:_clusterData_aggregates_map.clusters)||clusterData.clusters||[],listings=listingData.listings||listingData.results||[];if(console.log(`📊 Bundled data: ${clusters.length} clusters, ${listings.length} listings`),"city"===method&&clusters.length>0){let largestCluster=null,maxCount=0;if(clusters.forEach((cluster=>{const count=cluster.count||0;count>maxCount&&(maxCount=count,largestCluster=cluster)})),largestCluster){var _largestCluster_location,_largestCluster_coordinates,_largestCluster_center,_largestCluster_location1,_largestCluster_coordinates1,_largestCluster_center1;const coordinates=[(null===(_largestCluster_location=largestCluster.location)||void 0===_largestCluster_location?void 0:_largestCluster_location.longitude)||(null===(_largestCluster_coordinates=largestCluster.coordinates)||void 0===_largestCluster_coordinates?void 0:_largestCluster_coordinates.lng)||largestCluster.longitude||(null===(_largestCluster_center=largestCluster.center)||void 0===_largestCluster_center?void 0:_largestCluster_center.lng),(null===(_largestCluster_location1=largestCluster.location)||void 0===_largestCluster_location1?void 0:_largestCluster_location1.latitude)||(null===(_largestCluster_coordinates1=largestCluster.coordinates)||void 0===_largestCluster_coordinates1?void 0:_largestCluster_coordinates1.lat)||largestCluster.latitude||(null===(_largestCluster_center1=largestCluster.center)||void 0===_largestCluster_center1?void 0:_largestCluster_center1.lat)];if(coordinates[0]&&coordinates[1]){const center=[coordinates[0],coordinates[1]],autoCenter={center};return console.log(`🏆 Largest cluster center: ${maxCount} listings at [${center[0].toFixed(4)}, ${center[1].toFixed(4)}]`),setCachedAutoCenter(`${apiKey}-${method}`,autoCenter),autoCenter}}console.warn("⚠️ Largest cluster method failed, falling back to average method")}if(0===listings.length)return console.warn("⚠️ No listings found for auto-center detection"),null;const coordinates=[];if(listings.forEach((listing=>{const coord=extractCoordinates(listing);coord&&coordinates.push(coord)})),0===coordinates.length)return console.warn("⚠️ No valid coordinates found in listings"),null;const bounds=getPolygonBounds(coordinates);if(!bounds)return console.warn("⚠️ Could not calculate bounds from coordinates"),null;const autoCenter={center:calculateAverageCenter(coordinates,bounds)};return console.log(`✅ Average-based center detected: [${autoCenter.center[0]}, ${autoCenter.center[1]}] from ${coordinates.length} properties`),setCachedAutoCenter(`${apiKey}-${method}`,autoCenter),autoCenter}catch(error){return console.error("❌ Auto-center detection failed:",error),null}})(apiKey,centerCalculation);detected?(setMapCenter(detected.center),setMapZoom(initialZoom||10)):(console.log("🗺️ Using fallback center: Continental USA"),setMapCenter([-98.5795,39.8283]),setMapZoom(initialZoom||10))})()}),[apiKey,mapCenter,mapZoom,centerCalculation,initialZoom]);const getClusterPrecision=(0,react.useCallback)((zoom=>zoom<=6?5:zoom<=8?8:zoom<=10?12:zoom<=12?16:zoom<=14?20:25),[]),boundsToPolygon=(0,react.useCallback)((bounds=>{const sw=bounds.getSouthWest(),ne=bounds.getNorthEast();return[[[sw.lng,sw.lat],[ne.lng,sw.lat],[ne.lng,ne.lat],[sw.lng,ne.lat],[sw.lng,sw.lat]]]}),[]),fetchClusters=(0,react.useCallback)((async bounds=>{if(!map.current)return;const zoom=map.current.getZoom(),precision=getClusterPrecision(zoom),boundsKey=JSON.stringify(boundsToPolygon(bounds)),roundedZoom=Math.round(2*zoom)/2;if(lastFetchParams.current&&lastFetchParams.current.bounds===boundsKey&&Math.abs(lastFetchParams.current.zoom-roundedZoom)<.5)return void console.log(`⏭️ Skipping duplicate request (zoom: ${zoom.toFixed(1)}, similar to last: ${lastFetchParams.current.zoom.toFixed(1)})`);lastFetchParams.current={bounds:boundsKey,zoom:roundedZoom};const wasHighZoom=null!==currentZoomLevel.current&&currentZoomLevel.current>=13,isHighZoom=zoom>=13;null!==currentZoomLevel.current&&wasHighZoom!==isHighZoom&&console.log(`🎚️ Zoom threshold crossed: ${wasHighZoom?"HIGH→LOW":"LOW→HIGH"} (${currentZoomLevel.current.toFixed(1)} → ${zoom.toFixed(1)})`),currentZoomLevel.current=zoom,console.log(`🔍 Fetching clusters - zoom: ${zoom.toFixed(1)}, precision: ${precision}, enhanced: ${zoom>=13?"YES":"NO"}`),setError(null);try{var _data_aggregates_map,_data_aggregates;const url=new URL("https://api.repliers.io/listings");url.searchParams.set("cluster","true"),url.searchParams.set("clusterPrecision",precision.toString()),url.searchParams.set("clusterLimit","100"),url.searchParams.set("status","A"),url.searchParams.set("map",JSON.stringify(boundsToPolygon(bounds))),url.searchParams.set("key",apiKey),zoom>=13?(url.searchParams.set("listings","true"),url.searchParams.set("fields","address.*,mlsNumber,listPrice,details.numBedrooms,details.numBedroomsPlus,details.numBathrooms,details.numBathroomsPlus,details.numGarageSpaces,details.propertyType,type,lastStatus,images,status,class"),url.searchParams.set("clusterFields","mlsNumber,listPrice,coordinates,type,address.*,details.numBedrooms,details.numBedroomsPlus,details.numBathrooms,details.numBathroomsPlus,details.numGarageSpaces,details.propertyType,lastStatus,images,status,class"),url.searchParams.set("pageSize","200")):url.searchParams.set("listings","false");const response=await fetch(url.toString(),{headers:{"REPLIERS-API-KEY":apiKey,"Content-Type":"application/json"}});if(!response.ok)throw new Error(`API Error: ${response.status} ${response.statusText}`);const data=await response.json();console.log("📊 API Response:",data);const clusters=(null===(_data_aggregates=data.aggregates)||void 0===_data_aggregates||null===(_data_aggregates_map=_data_aggregates.map)||void 0===_data_aggregates_map?void 0:_data_aggregates_map.clusters)||data.clusters||[],clusterFeatures=[],singlePropertyFeatures=[];clusters.length>0&&console.log("🎯 Cluster data analysis:",clusters.slice(0,3).map((c=>({count:c.count,listPrice:c.listPrice,listPriceType:typeof c.listPrice,rawPrice:c.price,salePrice:c.salePrice,allPriceFields:Object.keys(c).filter((key=>key.toLowerCase().includes("price"))),allFields:Object.keys(c),hasAddressField:"address"in c,hasImagesField:"images"in c,hasClassField:"class"in c,addressValue:c.address,imagesValue:c.images,classValue:c.class,hasListingField:"listing"in c,hasMapField:"map"in c,hasPropertiesField:"properties"in c,fullClusterSample:c})))),clusters.forEach(((cluster,index)=>{var _cluster_location,_cluster_coordinates,_cluster_center,_cluster_location1,_cluster_coordinates1,_cluster_center1;const originalCoordinates=[(null===(_cluster_location=cluster.location)||void 0===_cluster_location?void 0:_cluster_location.longitude)||(null===(_cluster_coordinates=cluster.coordinates)||void 0===_cluster_coordinates?void 0:_cluster_coordinates.lng)||cluster.longitude||(null===(_cluster_center=cluster.center)||void 0===_cluster_center?void 0:_cluster_center.lng),(null===(_cluster_location1=cluster.location)||void 0===_cluster_location1?void 0:_cluster_location1.latitude)||(null===(_cluster_coordinates1=cluster.coordinates)||void 0===_cluster_coordinates1?void 0:_cluster_coordinates1.lat)||cluster.latitude||(null===(_cluster_center1=cluster.center)||void 0===_cluster_center1?void 0:_cluster_center1.lat)];if(1===cluster.count){var _cluster_listing,_cluster_map_,_cluster_listing1,_cluster_map_1,_cluster_map,_cluster_listing2,_cluster_listing3,_cluster_listing4,_cluster_listing5,_cluster_listing6,_cluster_listing7,_cluster_listing8,_cluster_listing9,_cluster_listing10,_cluster_listing11,_cluster_listing12,_cluster_listing13,_cluster_listing14,_cluster_listing15,_cluster_listing16,_cluster_listing17,_cluster_listing18,_cluster_listing19;const listPrice=(null===(_cluster_listing=cluster.listing)||void 0===_cluster_listing?void 0:_cluster_listing.listPrice)||cluster.listPrice||cluster.map&&(null===(_cluster_map_=cluster.map[0])||void 0===_cluster_map_?void 0:_cluster_map_.listPrice);console.log(`🔧 Single property cluster ${index} price extraction:`,{clusterCount:cluster.count,clusterListPrice:cluster.listPrice,nestedListingPrice:null===(_cluster_listing1=cluster.listing)||void 0===_cluster_listing1?void 0:_cluster_listing1.listPrice,mapDataPrice:null===(_cluster_map=cluster.map)||void 0===_cluster_map||null===(_cluster_map_1=_cluster_map[0])||void 0===_cluster_map_1?void 0:_cluster_map_1.listPrice,finalPrice:listPrice,typeAnalysis:{clusterType:cluster.type,listingType:null===(_cluster_listing2=cluster.listing)||void 0===_cluster_listing2?void 0:_cluster_listing2.type,finalType:(null===(_cluster_listing3=cluster.listing)||void 0===_cluster_listing3?void 0:_cluster_listing3.type)||cluster.type||"Sale"},enhancedFieldsAnalysis:{hasAddress:!!cluster.address||!!(null===(_cluster_listing4=cluster.listing)||void 0===_cluster_listing4?void 0:_cluster_listing4.address),hasDetails:!!cluster.details||!!(null===(_cluster_listing5=cluster.listing)||void 0===_cluster_listing5?void 0:_cluster_listing5.details),hasImages:!!cluster.images||!!(null===(_cluster_listing6=cluster.listing)||void 0===_cluster_listing6?void 0:_cluster_listing6.images),hasClass:!!cluster.class||!!(null===(_cluster_listing7=cluster.listing)||void 0===_cluster_listing7?void 0:_cluster_listing7.class),clusterKeys:Object.keys(cluster),listingKeys:cluster.listing?Object.keys(cluster.listing):null,addressValue:cluster.address||(null===(_cluster_listing8=cluster.listing)||void 0===_cluster_listing8?void 0:_cluster_listing8.address),imagesValue:cluster.images||(null===(_cluster_listing9=cluster.listing)||void 0===_cluster_listing9?void 0:_cluster_listing9.images),classValue:cluster.class||(null===(_cluster_listing10=cluster.listing)||void 0===_cluster_listing10?void 0:_cluster_listing10.class)},fullCluster:cluster}),singlePropertyFeatures.push({type:"Feature",properties:{mlsNumber:cluster.mlsNumber||(null===(_cluster_listing11=cluster.listing)||void 0===_cluster_listing11?void 0:_cluster_listing11.mlsNumber)||`single-${index}`,listPrice:"string"==typeof listPrice?parseFloat(listPrice):listPrice,propertyType:cluster.propertyType||(null===(_cluster_listing12=cluster.listing)||void 0===_cluster_listing12?void 0:_cluster_listing12.propertyType)||cluster.status||"Sale",type:(null===(_cluster_listing13=cluster.listing)||void 0===_cluster_listing13?void 0:_cluster_listing13.type)||cluster.type,isProperty:!0,address:(null===(_cluster_listing14=cluster.listing)||void 0===_cluster_listing14?void 0:_cluster_listing14.address)||cluster.address,details:(null===(_cluster_listing15=cluster.listing)||void 0===_cluster_listing15?void 0:_cluster_listing15.details)||cluster.details,images:(null===(_cluster_listing16=cluster.listing)||void 0===_cluster_listing16?void 0:_cluster_listing16.images)||cluster.images,lastStatus:(null===(_cluster_listing17=cluster.listing)||void 0===_cluster_listing17?void 0:_cluster_listing17.lastStatus)||cluster.lastStatus,status:(null===(_cluster_listing18=cluster.listing)||void 0===_cluster_listing18?void 0:_cluster_listing18.status)||cluster.status,class:(null===(_cluster_listing19=cluster.listing)||void 0===_cluster_listing19?void 0:_cluster_listing19.class)||cluster.class},geometry:{type:"Point",coordinates:[originalCoordinates[0],originalCoordinates[1]]}})}else{let clusterCoordinates=originalCoordinates;if(cluster.properties&&Array.isArray(cluster.properties)){const subCoords=[];if(cluster.properties.forEach((prop=>{const coord=extractCoordinates(prop);coord&&subCoords.push(coord)})),subCoords.length>0){const clusterBounds=getPolygonBounds(subCoords);if(clusterBounds){clusterCoordinates=calculateAverageCenter(subCoords,clusterBounds),console.log(`🎯 Adjusted cluster ${index} position for density (${subCoords.length} properties)`)}}}clusterFeatures.push({type:"Feature",properties:{count:cluster.count||1,precision:cluster.precision||precision,id:`cluster-${index}`},geometry:{type:"Point",coordinates:[clusterCoordinates[0],clusterCoordinates[1]]}})}}));const propertyFeatures=(data.listings||[]).filter((listing=>{var _listing_coordinates,_listing_map,_listing_coordinates1,_listing_map1;const lng=(null===(_listing_coordinates=listing.coordinates)||void 0===_listing_coordinates?void 0:_listing_coordinates.lng)||listing.longitude||(null===(_listing_map=listing.map)||void 0===_listing_map?void 0:_listing_map.longitude),lat=(null===(_listing_coordinates1=listing.coordinates)||void 0===_listing_coordinates1?void 0:_listing_coordinates1.lat)||listing.latitude||(null===(_listing_map1=listing.map)||void 0===_listing_map1?void 0:_listing_map1.latitude);return void 0!==lng&&void 0!==lat&&!isNaN(lng)&&!isNaN(lat)})).map(((listing,index)=>{var _listing_details,_listing_coordinates,_listing_map,_listing_coordinates1,_listing_map1;const baseProperties={mlsNumber:listing.mlsNumber,listPrice:"string"==typeof listing.listPrice?parseFloat(listing.listPrice):listing.listPrice,propertyType:listing.propertyType||(null===(_listing_details=listing.details)||void 0===_listing_details?void 0:_listing_details.propertyType)||listing.type||listing.status||"Sale",type:listing.type,isProperty:!0},enhancedProperties=zoom>=13?{address:listing.address,details:listing.details,images:listing.images,type:listing.type,lastStatus:listing.lastStatus,status:listing.status,class:listing.class}:{},finalProperties={...baseProperties,...enhancedProperties};return index<3&&(console.log(`🏗️ Creating property feature ${index}:`),console.log("- Raw listing from API:",listing),console.log("- Base properties created:",baseProperties),console.log("- Enhanced properties:",enhancedProperties),console.log("- Final properties:",finalProperties),console.log("- listPrice in final:",finalProperties.listPrice),console.log("- TYPE ANALYSIS:",{rawType:listing.type,baseType:baseProperties.type,finalType:finalProperties.type,isLease:"Lease"===finalProperties.type,isLeaseCheck:"Lease"===listing.type})),{type:"Feature",properties:finalProperties,geometry:{type:"Point",coordinates:[(null===(_listing_coordinates=listing.coordinates)||void 0===_listing_coordinates?void 0:_listing_coordinates.lng)||listing.longitude||(null===(_listing_map=listing.map)||void 0===_listing_map?void 0:_listing_map.longitude),(null===(_listing_coordinates1=listing.coordinates)||void 0===_listing_coordinates1?void 0:_listing_coordinates1.lat)||listing.latitude||(null===(_listing_map1=listing.map)||void 0===_listing_map1?void 0:_listing_map1.latitude)]}}}));if(zoom>=13&&data.listings&&data.listings.length>0){console.log(`📊 Raw API listings data (${data.listings.length} listings):`,data.listings.slice(0,2)),console.log("🏠 Sample property fields:",Object.keys(data.listings[0]||{})),console.log("💰 Price field analysis:",data.listings.slice(0,5).map((l=>({mls:l.mlsNumber,listPrice:l.listPrice,listPriceType:typeof l.listPrice,rawPrice:l.price,salePrice:l.salePrice,allPriceFields:Object.keys(l).filter((key=>key.toLowerCase().includes("price"))),propertyType:l.propertyType||l.type||l.status}))));const sampleListing=data.listings[0];var _sampleListing_images;if(sampleListing)console.log("🏡 Enhanced fields test:",{address:sampleListing.address,details:sampleListing.details,images:null===(_sampleListing_images=sampleListing.images)||void 0===_sampleListing_images?void 0:_sampleListing_images.slice(0,2),type:sampleListing.type,lastStatus:sampleListing.lastStatus,status:sampleListing.status,class:sampleListing.class}),console.log("🔍 Full raw listing object:",sampleListing)}const allFeatures=[...clusterFeatures,...singlePropertyFeatures,...propertyFeatures];if(console.log("🔧 Debug info:"),console.log("- Raw clusters from API:",clusters),console.log("- Processed cluster features:",clusterFeatures),console.log("- Property features with enhanced data:",propertyFeatures),console.log("- Single property features:",singlePropertyFeatures),console.log("- All features for map:",allFeatures),console.log("📊 Feature counts:",{clusters:clusterFeatures.length,singleProperties:singlePropertyFeatures.length,individualProperties:propertyFeatures.length,total:allFeatures.length}),zoom>=13&&propertyFeatures.length>0){var _sampleFeature_properties_images;console.log("🎯 Testing enhanced data storage in features:");const sampleFeature=propertyFeatures[0];console.log("- Sample feature properties:",sampleFeature.properties),console.log("- Has enhanced address:",!!sampleFeature.properties.address),console.log("- Has enhanced details:",!!sampleFeature.properties.details),console.log("- Has images:",!!(null===(_sampleFeature_properties_images=sampleFeature.properties.images)||void 0===_sampleFeature_properties_images?void 0:_sampleFeature_properties_images.length)),console.log("- Has listPrice:",!!sampleFeature.properties.listPrice),console.log("- Sample listPrice:",sampleFeature.properties.listPrice)}const featuresWithPrices=allFeatures.filter((f=>"listPrice"in f.properties&&f.properties.listPrice));console.log(`💰 Features with price data: ${featuresWithPrices.length}/${allFeatures.length}`),featuresWithPrices.length>0&&console.log("💰 Sample prices:",featuresWithPrices.slice(0,3).map((f=>({price:"listPrice"in f.properties?f.properties.listPrice:"N/A",type:"propertyType"in f.properties?f.properties.propertyType:"N/A"})))),console.log("🔍 DETAILED FEATURE DEBUGGING:");const propertyFeature=allFeatures.find((f=>"listPrice"in f.properties&&void 0!==f.properties.listPrice&&null!==f.properties.listPrice))||allFeatures.find((f=>"listPrice"in f.properties));propertyFeature&&(console.log("📋 Sample property feature FULL structure:"),console.log("- Full feature object:",propertyFeature),console.log("- Properties object:",propertyFeature.properties),console.log("- Properties keys:",Object.keys(propertyFeature.properties)),"listPrice"in propertyFeature.properties&&(console.log("- listPrice value:",propertyFeature.properties.listPrice),console.log("- listPrice type:",typeof propertyFeature.properties.listPrice)),console.log("- Has listPrice:","listPrice"in propertyFeature.properties),"isProperty"in propertyFeature.properties&&console.log("- IsProperty value:",propertyFeature.properties.isProperty));const geoJsonData={type:"FeatureCollection",features:allFeatures};console.log("🗺️ GeoJSON data structure being sent to Mapbox:"),console.log("- Feature collection:",geoJsonData),console.log("- First 3 features:",geoJsonData.features.slice(0,3));const source=map.current.getSource("listings");source?(source.setData(geoJsonData),console.log("✅ Map source updated with",allFeatures.length,"features"),addPriceMarkers(allFeatures)):console.error("❌ Map source 'listings' not found");const total=data.count||clusterFeatures.reduce(((sum,feature)=>sum+feature.properties.count),0);setTotalCount(total),console.log(`✅ Loaded ${clusterFeatures.length} clusters, ${propertyFeatures.length} properties, ${total} total`)}catch(err){const errorMessage=err instanceof Error?err.message:"Failed to load listings";setError(errorMessage),console.error("❌ Fetch failed:",err)}}),[apiKey,getClusterPrecision,boundsToPolygon]);return(0,react.useEffect)((()=>{if(mapContainer.current&&!map.current&&mapCenter&&null!==mapZoom)return mapbox_gl_default().accessToken=mapboxToken,map.current=new(mapbox_gl_default().Map)({container:mapContainer.current,style:mapStyle,center:mapCenter,zoom:mapZoom}),map.current.on("load",(()=>{if(!map.current)return;map.current.addSource("listings",{type:"geojson",data:{type:"FeatureCollection",features:[]}}),map.current.addLayer({id:"clusters",type:"circle",source:"listings",filter:["has","count"],paint:{"circle-color":["step",["get","count"],"#51bbd6",50,"#f1c40f",500,"#f28cb1",1500,"#e74c3c"],"circle-radius":["step",["get","count"],10,50,14,500,18,1500,22],"circle-stroke-width":2,"circle-stroke-color":"#fff","circle-opacity":.8}}),map.current.addLayer({id:"cluster-count",type:"symbol",source:"listings",filter:["has","count"],layout:{"text-field":["get","count"],"text-font":["DIN Offc Pro Medium","Arial Unicode MS Bold"],"text-size":["step",["get","count"],10,50,12,500,14,1500,16]},paint:{"text-color":"#ffffff"}}),map.current.addLayer({id:"property-dots",type:"circle",source:"listings",filter:["has","isProperty"],paint:{"circle-color":"#374151","circle-radius":3,"circle-stroke-width":1,"circle-stroke-color":"#fff","circle-opacity":.9}}),map.current.on("click","clusters",(e=>{var _e_features;if(!map.current||!(null===(_e_features=e.features)||void 0===_e_features?void 0:_e_features[0]))return;const coordinates=e.features[0].geometry.coordinates,currentZoom=map.current.getZoom(),targetZoom=Math.min(currentZoom+4,16);console.log(`🎯 Cluster clicked - Current zoom: ${currentZoom.toFixed(1)} → Target zoom: ${targetZoom.toFixed(1)}`),map.current.easeTo({center:coordinates,zoom:targetZoom,duration:1e3,easing:t=>t*(2-t)})})),map.current.on("mouseenter","clusters",(()=>{map.current&&(map.current.getCanvas().style.cursor="pointer")})),map.current.on("mouseleave","clusters",(()=>{map.current&&(map.current.getCanvas().style.cursor="")})),map.current.on("mouseenter","property-dots",(()=>{map.current&&(map.current.getCanvas().style.cursor="pointer")})),map.current.on("mouseleave","property-dots",(()=>{map.current&&(map.current.getCanvas().style.cursor="")}));const bounds=map.current.getBounds();bounds&&fetchClusters(bounds)})),map.current.on("moveend",(()=>{if(!map.current)return;const bounds=map.current.getBounds();bounds&&fetchClusters(bounds)})),()=>{clearPriceMarkers(),map.current&&(map.current.remove(),map.current=null)}}),[mapboxToken,mapStyle,mapCenter,mapZoom,fetchClusters,clearPriceMarkers,addPriceMarkers]),(0,jsx_runtime.jsxs)("div",{style:{width,height,position:"relative"},children:[(0,jsx_runtime.jsx)("div",{ref:mapContainer,style:{width:"100%",height:"100%"},className:"rounded-lg overflow-hidden"}),(0,jsx_runtime.jsx)("div",{style:{position:"absolute",top:"16px",right:"16px",backgroundColor:"rgba(255, 255, 255, 0.95)",padding:"8px 12px",borderRadius:"6px",boxShadow:"0 2px 8px rgba(0, 0, 0, 0.15)",fontSize:"14px",fontWeight:"600",color:"#374151"},children:error?(0,jsx_runtime.jsx)("span",{style:{color:"#ef4444"},children:"Error"}):(0,jsx_runtime.jsxs)("span",{children:[totalCount.toLocaleString()," properties"]})}),error&&(0,jsx_runtime.jsx)("div",{style:{position:"absolute",bottom:"16px",left:"16px",right:"16px",backgroundColor:"#fef2f2",border:"1px solid #fecaca",borderRadius:"6px",padding:"12px",color:"#b91c1c",fontSize:"14px"},children:error}),(0,jsx_runtime.jsx)(PropertyPreviewModal,{open:modalOpen,onClose:()=>setModalOpen(!1),listing:selectedListing,onViewDetails:mlsNumber=>{console.log("🔗 View details for MLS:",mlsNumber)}})]})}MapListings.__docgenInfo={description:"MapListings Component\n\nA high-performance real estate map component that displays property listings\nusing server-side clustering from the Repliers API. Automatically adjusts\ncluster precision based on zoom level for optimal user experience.\n\nFeatures:\n- Server-side clustering for optimal performance\n- Zoom-based precision adjustment\n- Hierarchical cluster drilling\n- Minimal API calls\n- Property count display",methods:[],displayName:"MapListings",props:{apiKey:{required:!0,tsType:{name:"string"},description:"Repliers API key - required"},mapboxToken:{required:!0,tsType:{name:"string"},description:"MapBox access token - required"},initialCenter:{required:!1,tsType:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}]},description:"Initial map center coordinates [lng, lat] - auto-detects if not provided"},initialZoom:{required:!1,tsType:{name:"number"},description:"Initial zoom level - auto-calculates if not provided"},height:{required:!1,tsType:{name:"string"},description:"Map container height",defaultValue:{value:'"100%"',computed:!1}},width:{required:!1,tsType:{name:"string"},description:"Map container width",defaultValue:{value:'"100%"',computed:!1}},mapStyle:{required:!1,tsType:{name:"string"},description:"Map style",defaultValue:{value:'"mapbox://styles/mapbox/streets-v12"',computed:!1}},centerCalculation:{required:!1,tsType:{name:"union",raw:'"average" | "city"',elements:[{name:"literal",value:'"average"'},{name:"literal",value:'"city"'}]},description:"Center calculation method",defaultValue:{value:'"average"',computed:!1}}}};const map_listings_stories={title:"Tutorials/Configuring the MapListings Component with the Repliers API (WIP)",component:MapListings,parameters:{layout:"fullscreen",docs:{page:()=>null}},argTypes:{apiKey:{control:"text",description:"Repliers API key (required)"},mapboxToken:{control:"text",description:"MapBox access token (required)"},initialCenter:{control:"object",description:"Initial map center coordinates [lng, lat]"},initialZoom:{control:{type:"range",min:1,max:20,step:1},description:"Initial zoom level"},height:{control:"text",description:"Map container height"},width:{control:"text",description:"Map container width"},mapStyle:{control:"select",options:["mapbox://styles/mapbox/streets-v12","mapbox://styles/mapbox/light-v11","mapbox://styles/mapbox/dark-v11","mapbox://styles/mapbox/satellite-v9","mapbox://styles/mapbox/satellite-streets-v12"],description:"MapBox map style"}}},SAMPLE_API_KEY="pxI19UMy9zfw9vz5lRxoGpjJWXrMnm",SAMPLE_MAPBOX_TOKEN="pk.eyJ1IjoibWlsYW5zb21hIiwiYSI6ImNtZWJrODZmajBwMWQya3B3cHE1M2Y3anoifQ.HMDLOc-6V9K3-mHKeTHHxw",Part1_BasicListings={args:{apiKey:SAMPLE_API_KEY,mapboxToken:SAMPLE_MAPBOX_TOKEN,initialZoom:8,height:"100vh",width:"100vw",mapStyle:"mapbox://styles/mapbox/streets-v12"},parameters:{docs:{description:{story:"\n🎯 **This is the main interactive demo!** This example demonstrates server-side clustering\nwith the Repliers API using the default 'average' center calculation method.\n\n**Cluster Precision Levels:**\n- **Zoom 6 and below**: Continental-level clusters (precision 3)\n- **Zoom 7-8**: State/Province-level clusters (precision 5)\n- **Zoom 9-10**: Metropolitan-level clusters (precision 8)\n- **Zoom 11-12**: City-level clusters (precision 12)\n- **Zoom 13-14**: District-level clusters (precision 16)\n- **Zoom 15+**: Street-level clusters (precision 20)\n\n**Center Calculation:**\nUses the largest cluster method to find the area with the most listings and centers the map on it.\n\n**Performance Features:**\n- Server-side clustering reduces data transfer\n- Only one API call per map movement\n- Cluster limit reduced to 100 for better distribution\n        "}}}},Part2_LargestClusterCenter={args:{apiKey:SAMPLE_API_KEY,mapboxToken:SAMPLE_MAPBOX_TOKEN,initialZoom:10,height:"100vh",width:"100vw",mapStyle:"mapbox://styles/mapbox/streets-v12"},parameters:{docs:{description:{story:"\n🏆 **Largest Cluster Center Calculation**\n\nThis method finds the largest cluster of listings and centers the map on it for optimal viewing.\n\n**How it works:**\n- Calls the clustering API with low precision to get the biggest clusters\n- Identifies the cluster with the highest number of listings\n- Centers the map on that cluster's location\n\n**Best for:**\n- Focusing on the most active area in your dataset\n- Automatic centering on the densest listing concentration\n- Quick identification of market hotspots\n\n**Console output:** `🏆 Largest cluster: 24938 listings at [-79.3832, 43.6532]`\n        "}}}},Part3_MapStyles={args:{apiKey:SAMPLE_API_KEY,mapboxToken:SAMPLE_MAPBOX_TOKEN,initialZoom:10,height:"100vh",width:"100vw",mapStyle:"mapbox://styles/mapbox/dark-v11"},parameters:{docs:{description:{story:"\n🎨 **Map Style Customization**\n\nThis example showcases the dark theme map style, demonstrating how you can customize\nthe visual appearance of your MapListings component.\n\n**Available styles:**\n- `mapbox://styles/mapbox/streets-v12` - Default streets view\n- `mapbox://styles/mapbox/light-v11` - Light theme\n- `mapbox://styles/mapbox/dark-v11` - Dark theme (shown here)\n- `mapbox://styles/mapbox/satellite-v9` - Satellite imagery\n- `mapbox://styles/mapbox/satellite-streets-v12` - Satellite with street labels\n\n**Best for:**\n- Matching your application's design theme\n- Providing user choice for map appearance\n- Better visibility in different lighting conditions\n\n**Note:** The clustering and listing functionality remains the same across all styles.\n        "}}}},Part4_FilteredSearch={args:{apiKey:SAMPLE_API_KEY,mapboxToken:SAMPLE_MAPBOX_TOKEN,initialCenter:[-98.5795,39.8283],initialZoom:4,height:"100vh",width:"100vw",mapStyle:"mapbox://styles/mapbox/streets-v12"},parameters:{docs:{disable:!0}}},__namedExportsOrder=["Part1_BasicListings","Part2_LargestClusterCenter","Part3_MapStyles","Part4_FilteredSearch"];Part1_BasicListings.parameters={...Part1_BasicListings.parameters,docs:{...Part1_BasicListings.parameters?.docs,source:{originalSource:'{\n  args: {\n    apiKey: SAMPLE_API_KEY,\n    mapboxToken: SAMPLE_MAPBOX_TOKEN,\n    initialZoom: 8,\n    height: "100vh",\n    width: "100vw",\n    mapStyle: "mapbox://styles/mapbox/streets-v12"\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: `\n🎯 **This is the main interactive demo!** This example demonstrates server-side clustering\nwith the Repliers API using the default \'average\' center calculation method.\n\n**Cluster Precision Levels:**\n- **Zoom 6 and below**: Continental-level clusters (precision 3)\n- **Zoom 7-8**: State/Province-level clusters (precision 5)\n- **Zoom 9-10**: Metropolitan-level clusters (precision 8)\n- **Zoom 11-12**: City-level clusters (precision 12)\n- **Zoom 13-14**: District-level clusters (precision 16)\n- **Zoom 15+**: Street-level clusters (precision 20)\n\n**Center Calculation:**\nUses the largest cluster method to find the area with the most listings and centers the map on it.\n\n**Performance Features:**\n- Server-side clustering reduces data transfer\n- Only one API call per map movement\n- Cluster limit reduced to 100 for better distribution\n        `\n      }\n    }\n  }\n}',...Part1_BasicListings.parameters?.docs?.source},description:{story:"**Part 1: Basic Map Listings Display**\n\nThis example shows the core functionality of displaying clustered real estate\nlistings on a map. Different API keys will show different datasets.\n\n**Try this:**\n1. Notice the large cluster numbers (hundreds/thousands of properties)\n2. Click any cluster to zoom in and see it break into smaller sub-clusters\n3. Continue drilling down until you reach individual blue property dots\n4. Click individual properties to see basic listing details\n5. Watch the property count update in the top-right corner",...Part1_BasicListings.parameters?.docs?.description}}},Part2_LargestClusterCenter.parameters={...Part2_LargestClusterCenter.parameters,docs:{...Part2_LargestClusterCenter.parameters?.docs,source:{originalSource:'{\n  args: {\n    apiKey: SAMPLE_API_KEY,\n    mapboxToken: SAMPLE_MAPBOX_TOKEN,\n    initialZoom: 10,\n    height: "100vh",\n    width: "100vw",\n    mapStyle: "mapbox://styles/mapbox/streets-v12"\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: `\n🏆 **Largest Cluster Center Calculation**\n\nThis method finds the largest cluster of listings and centers the map on it for optimal viewing.\n\n**How it works:**\n- Calls the clustering API with low precision to get the biggest clusters\n- Identifies the cluster with the highest number of listings\n- Centers the map on that cluster\'s location\n\n**Best for:**\n- Focusing on the most active area in your dataset\n- Automatic centering on the densest listing concentration\n- Quick identification of market hotspots\n\n**Console output:** \\`🏆 Largest cluster: 24938 listings at [-79.3832, 43.6532]\\`\n        `\n      }\n    }\n  }\n}',...Part2_LargestClusterCenter.parameters?.docs?.source},description:{story:"**Part 2: Largest Cluster Center Calculation**\n\nThis example demonstrates the largest cluster center calculation method, which\nfinds the cluster with the most listings and centers the map on it.\nThis provides optimal viewing of the most active areas.",...Part2_LargestClusterCenter.parameters?.docs?.description}}},Part3_MapStyles.parameters={...Part3_MapStyles.parameters,docs:{...Part3_MapStyles.parameters?.docs,source:{originalSource:'{\n  args: {\n    apiKey: SAMPLE_API_KEY,\n    mapboxToken: SAMPLE_MAPBOX_TOKEN,\n    initialZoom: 10,\n    height: "100vh",\n    width: "100vw",\n    mapStyle: "mapbox://styles/mapbox/dark-v11"\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: `\n🎨 **Map Style Customization**\n\nThis example showcases the dark theme map style, demonstrating how you can customize\nthe visual appearance of your MapListings component.\n\n**Available styles:**\n- \\`mapbox://styles/mapbox/streets-v12\\` - Default streets view\n- \\`mapbox://styles/mapbox/light-v11\\` - Light theme\n- \\`mapbox://styles/mapbox/dark-v11\\` - Dark theme (shown here)\n- \\`mapbox://styles/mapbox/satellite-v9\\` - Satellite imagery\n- \\`mapbox://styles/mapbox/satellite-streets-v12\\` - Satellite with street labels\n\n**Best for:**\n- Matching your application\'s design theme\n- Providing user choice for map appearance\n- Better visibility in different lighting conditions\n\n**Note:** The clustering and listing functionality remains the same across all styles.\n        `\n      }\n    }\n  }\n}',...Part3_MapStyles.parameters?.docs?.source},description:{story:"**Part 3: Different Map Styles**\n\nThis example demonstrates different map styles available with the MapListings component.\nYou can choose from various MapBox styles to match your application's design.",...Part3_MapStyles.parameters?.docs?.description}}},Part4_FilteredSearch.parameters={...Part4_FilteredSearch.parameters,docs:{...Part4_FilteredSearch.parameters?.docs,source:{originalSource:'{\n  args: {\n    apiKey: SAMPLE_API_KEY,\n    mapboxToken: SAMPLE_MAPBOX_TOKEN,\n    initialCenter: [-98.5795, 39.8283],\n    // Continental USA center\n    initialZoom: 4,\n    height: "100vh",\n    width: "100vw",\n    mapStyle: "mapbox://styles/mapbox/streets-v12"\n    // Note: These are placeholder props for future filter implementation\n    // minBedrooms: 2,\n    // maxPrice: 800000,\n    // propertyTypes: [\'residential\', \'condo\']\n  },\n  parameters: {\n    docs: {\n      disable: true // Hide from docs\n    }\n  }\n}',...Part4_FilteredSearch.parameters?.docs?.source},description:{story:"**Part 4: Custom Filters and Multi-Query Setup**\n\nThis placeholder demonstrates how the component could be extended with\nproperty filters (bedrooms, bathrooms, price range) and multi-query\nfunctionality for complex search scenarios.",...Part4_FilteredSearch.parameters?.docs?.description}}}}}]);