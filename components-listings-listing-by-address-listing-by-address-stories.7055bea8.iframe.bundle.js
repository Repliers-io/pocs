"use strict";(self.webpackChunkpocs=self.webpackChunkpocs||[]).push([[365],{"./src/components/listings/listing-by-address/listing-by-address.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"POCS/Listings/ListingByAddress",component:__webpack_require__("./src/components/listings/listing-by-address/listing-by-address.tsx").C,parameters:{layout:"padded",docs:{description:{component:'\n## 🏠 ListingByAddress Component\n\nA comprehensive React component for searching and displaying property listings by address using Google Places API integration and the Repliers API.\n\nThis component helps users:\n- Search for addresses using Google Places Autocomplete\n- Find and display detailed property listings from Repliers API\n- View comprehensive property data with smart formatting\n- Browse property image galleries with CDN integration\n\n## 🚀 Quick Start\n\n1. Ensure you have valid API keys for both Google Places and Repliers API\n\n2. Import and use the component:\n```tsx\nimport { ListingByAddress } from "./components/listings/listing-by-address";\n\nfunction App() {\n  const handleListingSelected = (listing) => {\n    console.log(\'Selected listing:\', listing);\n    // listing contains ALL property data from the API\n    // including details, images, pricing, etc.\n  };\n\n  return (\n    <div className="container mx-auto p-6">\n      <ListingByAddress\n        onListingSelected={handleListingSelected}\n        className="max-w-4xl mx-auto"\n      />\n    </div>\n  );\n}\n```\n\n## 💡 Key Features\n\n1. **🔍 Address Search** - Google Places integration for intelligent address autocomplete\n2. **📊 Complete Data Display** - Shows ALL available data from the API response with smart formatting\n3. **🖼️ Image Gallery** - Automatic CDN image detection with thumbnail grid and modal viewing\n4. **📱 Responsive Design** - Works beautifully on all screen sizes\n5. **⚡ Smart Selection** - Auto-selects single results, shows selection UI for multiple\n6. **🎨 Enhanced UI** - Collapsible sections, loading states, and error handling\n\n## 🔧 Props\n\n| Prop | Type | Default | Description |\n|------|------|---------|-------------|\n| onListingSelected | (listing: PropertyListing \\| null) => void | undefined | Callback fired when a listing is selected |\n| className | string | undefined | Additional CSS classes to apply to the component |\n\n## 🖼️ Image Processing\n\nThe component automatically detects and processes images:\n\n1. **Detection**: Scans all data for image filenames matching pattern `IMG-[A-Z0-9]+_\\d+\\.jpg`\n2. **CDN URL Generation**: Converts filenames to full CDN URLs:\n   ```\n   IMG-ABC123_001.jpg → https://cdn.repliers.io/IMG-ABC123_001.jpg?class=small\n   ```\n3. **Gallery Display**: Creates responsive thumbnail grid (3-6 columns)\n4. **Modal Viewing**: Click thumbnails to view full-size images\n\n## 📊 Data Formatting\n\nThe component provides smart formatting for different data types:\n- **Prices**: `$1,234,567` format\n- **Dates/Timestamps**: Human-readable format with timezone\n- **Phone Numbers**: `(123) 456-7890` format\n- **Boolean Values**: "Yes"/"No" display\n- **Square Footage**: `1,234 sqft` format\n- **Nested Objects**: Organized display for complex data structures\n\n## 🔌 API Integration\n\n### Required Setup\n1. **Repliers API Key**: Required via `ApiInput` component\n2. **Google Places API**: Required for address search\n3. **CORS Configuration**: Ensure API endpoints allow browser requests\n\n### Endpoints Used\n- **Listings Search**: `https://api.repliers.io/listings`\n  - Parameters: `streetName`, `streetNumber`, `city`\n  - Headers: `REPLIERS-API-KEY`\n\n## 📝 Usage Examples\n\n### Basic Implementation\n```tsx\nfunction PropertySearchPage() {\n  const [selectedProperty, setSelectedProperty] = useState(null);\n\n  const handleListingSelected = (listing) => {\n    setSelectedProperty(listing);\n    console.log(\'Property selected:\', listing);\n    // The listing object contains ALL data from the API\n    // Use this data however your application needs\n  };\n\n  return (\n    <div className="container mx-auto p-6">\n      <h1 className="text-2xl font-bold mb-6">Property Search</h1>\n      \n      <ListingByAddress \n        onListingSelected={handleListingSelected}\n        className="mb-8"\n      />\n      \n      {selectedProperty && (\n        <div className="mt-8 p-4 bg-gray-100 rounded">\n          <h2 className="text-lg font-semibold">Selected Property</h2>\n          <p>Address: {selectedProperty.address}</p>\n          <p>Price: {selectedProperty.price ? `$${selectedProperty.price.toLocaleString()}` : \'N/A\'}</p>\n          {/* Access any field from the complete API response */}\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n### Integration with Other Components\n```tsx\nfunction RealEstateApp() {\n  const handlePropertySelection = (property) => {\n    // Pass the complete property data to other components\n    // that need specific information\n    if (property) {\n      // Example: Extract what you need for your use case\n      const propertyInfo = {\n        address: property.address,\n        bedrooms: property.details?.numBedrooms,\n        bathrooms: property.details?.numBathrooms,\n        price: property.price,\n        // ... any other fields from the complete API response\n      };\n      \n      // Use the data as needed in your application\n      updateApplicationState(propertyInfo);\n    }\n  };\n\n  return (\n    <ListingByAddress onListingSelected={handlePropertySelection} />\n  );\n}\n```\n        '}}},tags:["autodocs"]},Default={args:{},decorators:[Story=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{className:"container mx-auto max-w-4xl p-6",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Story,{})})]},__namedExportsOrder=["Default"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {},\n  decorators: [Story => <div className="container mx-auto max-w-4xl p-6">\n        <Story />\n      </div>]\n}',...Default.parameters?.docs?.source}}}}}]);