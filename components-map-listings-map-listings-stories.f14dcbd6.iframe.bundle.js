"use strict";(self.webpackChunkpocs=self.webpackChunkpocs||[]).push([[272],{"./src/components/map-listings/map-listings.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Part1_BasicListings:()=>Part1_BasicListings,Part2_AlternativeDataset:()=>Part2_AlternativeDataset,Part3_FilteredSearch:()=>Part3_FilteredSearch,__namedExportsOrder:()=>__namedExportsOrder,default:()=>map_listings_stories});var jsx_runtime=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),mapbox_gl=__webpack_require__("./node_modules/mapbox-gl/dist/mapbox-gl.js"),mapbox_gl_default=__webpack_require__.n(mapbox_gl),console=(__webpack_require__("./node_modules/mapbox-gl/dist/mapbox-gl.css"),__webpack_require__("./node_modules/console-browserify/index.js"));const detectAutoCenter=async apiKey=>{try{console.log("üéØ Auto-detecting map center from listings data...");const url=new URL("https://api.repliers.io/listings");url.searchParams.set("cluster","false"),url.searchParams.set("listings","true"),url.searchParams.set("pageSize","500"),url.searchParams.set("status","A"),url.searchParams.set("key",apiKey);const response=await fetch(url.toString(),{headers:{"REPLIERS-API-KEY":apiKey,"Content-Type":"application/json"}});if(!response.ok)throw new Error(`Auto-center API Error: ${response.status} ${response.statusText}`);const data=await response.json(),listings=data.listings||data.results||[];if(!listings||0===listings.length)return console.warn("‚ö†Ô∏è No listings found for auto-center detection"),null;const coordinates=[];if(listings.forEach((listing=>{const coord=(listing=>{var _listing_coordinates,_listing_coordinates1,_listing_map,_listing_map1,_listing_location,_listing_location1,_listing_center,_listing_center1;return(null===(_listing_coordinates=listing.coordinates)||void 0===_listing_coordinates?void 0:_listing_coordinates.lat)&&(null===(_listing_coordinates1=listing.coordinates)||void 0===_listing_coordinates1?void 0:_listing_coordinates1.lng)?{lat:listing.coordinates.lat,lng:listing.coordinates.lng}:listing.latitude&&listing.longitude?{lat:listing.latitude,lng:listing.longitude}:(null===(_listing_map=listing.map)||void 0===_listing_map?void 0:_listing_map.latitude)&&(null===(_listing_map1=listing.map)||void 0===_listing_map1?void 0:_listing_map1.longitude)?{lat:listing.map.latitude,lng:listing.map.longitude}:(null===(_listing_location=listing.location)||void 0===_listing_location?void 0:_listing_location.latitude)&&(null===(_listing_location1=listing.location)||void 0===_listing_location1?void 0:_listing_location1.longitude)?{lat:listing.location.latitude,lng:listing.location.longitude}:(null===(_listing_center=listing.center)||void 0===_listing_center?void 0:_listing_center.lat)&&(null===(_listing_center1=listing.center)||void 0===_listing_center1?void 0:_listing_center1.lng)?{lat:listing.center.lat,lng:listing.center.lng}:null})(listing);coord&&coordinates.push(coord)})),0===coordinates.length)return console.warn("‚ö†Ô∏è No valid coordinates found in listings"),null;const bounds=(coordinates=>{if(0===coordinates.length)return null;let north=coordinates[0].lat,south=coordinates[0].lat,east=coordinates[0].lng,west=coordinates[0].lng;return coordinates.forEach((coord=>{north=Math.max(north,coord.lat),south=Math.min(south,coord.lat),east=Math.max(east,coord.lng),west=Math.min(west,coord.lng)})),{north,south,east,west}})(coordinates);if(!bounds)return console.warn("‚ö†Ô∏è Could not calculate bounds from coordinates"),null;const autoCenter=(bounds=>{const{north,south,east,west}=bounds,center=[(east+west)/2,(north+south)/2],latSpan=north-south,lngSpan=east-west,maxSpan=Math.max(latSpan,lngSpan);let zoom=10;return zoom=maxSpan>50?3:maxSpan>20?4:maxSpan>10?5:maxSpan>5?6:maxSpan>2?7:maxSpan>1?8:maxSpan>.5?9:maxSpan>.25?10:maxSpan>.1?11:maxSpan>.05?12:13,{center,zoom}})(bounds);return console.log(`‚úÖ Auto-center detected: [${autoCenter.center[0]}, ${autoCenter.center[1]}] at zoom ${autoCenter.zoom} from ${coordinates.length} properties`),((apiKey,data)=>{try{const cacheData={...data,timestamp:Date.now()};localStorage.setItem(`mapListings-autoCenter-${apiKey}`,JSON.stringify(cacheData))}catch(error){console.warn("Failed to cache auto-center data:",error)}})(apiKey,autoCenter),autoCenter}catch(error){return console.error("‚ùå Auto-center detection failed:",error),null}};function MapListings({apiKey,mapboxToken,initialCenter,initialZoom,height="100%",width="100%",mapStyle="mapbox://styles/mapbox/streets-v12"}){const mapContainer=(0,react.useRef)(null),map=(0,react.useRef)(null),[isLoading,setIsLoading]=(0,react.useState)(!1),[error,setError]=(0,react.useState)(null),[totalCount,setTotalCount]=(0,react.useState)(0),[mapCenter,setMapCenter]=(0,react.useState)(initialCenter||null),[mapZoom,setMapZoom]=(0,react.useState)(initialZoom||null),[isDetectingCenter,setIsDetectingCenter]=(0,react.useState)(!initialCenter);(0,react.useEffect)((()=>{(async()=>{if(mapCenter&&mapZoom)return;setIsDetectingCenter(!0);const cached=(apiKey=>{try{const cached=localStorage.getItem(`mapListings-autoCenter-${apiKey}`);if(cached){const data=JSON.parse(cached);if(Date.now()-data.timestamp<864e5)return{center:data.center,zoom:data.zoom}}}catch(error){console.warn("Failed to retrieve cached auto-center data:",error)}return null})(apiKey);if(cached)return console.log("üì¶ Using cached auto-center data:",cached),setMapCenter(cached.center),setMapZoom(cached.zoom),void setIsDetectingCenter(!1);const detected=await detectAutoCenter(apiKey);detected?(setMapCenter(detected.center),setMapZoom(detected.zoom)):(console.log("üó∫Ô∏è Using fallback center: Continental USA"),setMapCenter([-98.5795,39.8283]),setMapZoom(4)),setIsDetectingCenter(!1)})()}),[apiKey,mapCenter,mapZoom]);const getClusterPrecision=(0,react.useCallback)((zoom=>zoom<=8?5:zoom<=10?8:zoom<=12?12:zoom<=14?16:20),[]),boundsToPolygon=(0,react.useCallback)((bounds=>{const sw=bounds.getSouthWest(),ne=bounds.getNorthEast();return[[[sw.lng,sw.lat],[ne.lng,sw.lat],[ne.lng,ne.lat],[sw.lng,ne.lat],[sw.lng,sw.lat]]]}),[]),fetchClusters=(0,react.useCallback)((async bounds=>{if(!map.current)return;const zoom=map.current.getZoom(),precision=getClusterPrecision(zoom);console.log(`üîç Fetching clusters - zoom: ${zoom.toFixed(1)}, precision: ${precision}`),setIsLoading(!0),setError(null);try{var _data_aggregates_map,_data_aggregates;const url=new URL("https://api.repliers.io/listings");url.searchParams.set("cluster","true"),url.searchParams.set("clusterPrecision",precision.toString()),url.searchParams.set("clusterLimit","200"),url.searchParams.set("status","A"),url.searchParams.set("map",JSON.stringify(boundsToPolygon(bounds))),url.searchParams.set("key",apiKey),zoom>=14?(url.searchParams.set("listings","true"),url.searchParams.set("clusterFields","mlsNumber,listPrice,coordinates"),url.searchParams.set("pageSize","200")):url.searchParams.set("listings","false");const response=await fetch(url.toString(),{headers:{"REPLIERS-API-KEY":apiKey,"Content-Type":"application/json"}});if(!response.ok)throw new Error(`API Error: ${response.status} ${response.statusText}`);const data=await response.json();console.log("üìä API Response:",data);const clusters=(null===(_data_aggregates=data.aggregates)||void 0===_data_aggregates||null===(_data_aggregates_map=_data_aggregates.map)||void 0===_data_aggregates_map?void 0:_data_aggregates_map.clusters)||data.clusters||[],clusterFeatures=clusters.map(((cluster,index)=>{var _cluster_location,_cluster_coordinates,_cluster_center,_cluster_location1,_cluster_coordinates1,_cluster_center1;return{type:"Feature",properties:{count:cluster.count||1,precision:cluster.precision||precision,id:`cluster-${index}`},geometry:{type:"Point",coordinates:[(null===(_cluster_location=cluster.location)||void 0===_cluster_location?void 0:_cluster_location.longitude)||(null===(_cluster_coordinates=cluster.coordinates)||void 0===_cluster_coordinates?void 0:_cluster_coordinates.lng)||cluster.longitude||(null===(_cluster_center=cluster.center)||void 0===_cluster_center?void 0:_cluster_center.lng),(null===(_cluster_location1=cluster.location)||void 0===_cluster_location1?void 0:_cluster_location1.latitude)||(null===(_cluster_coordinates1=cluster.coordinates)||void 0===_cluster_coordinates1?void 0:_cluster_coordinates1.lat)||cluster.latitude||(null===(_cluster_center1=cluster.center)||void 0===_cluster_center1?void 0:_cluster_center1.lat)]}}})),propertyFeatures=(data.listings||[]).map((listing=>{var _listing_coordinates,_listing_coordinates1;return{type:"Feature",properties:{mlsNumber:listing.mlsNumber,listPrice:listing.listPrice,isProperty:!0},geometry:{type:"Point",coordinates:[(null===(_listing_coordinates=listing.coordinates)||void 0===_listing_coordinates?void 0:_listing_coordinates.lng)||listing.longitude,(null===(_listing_coordinates1=listing.coordinates)||void 0===_listing_coordinates1?void 0:_listing_coordinates1.lat)||listing.latitude]}}})),allFeatures=[...clusterFeatures,...propertyFeatures];console.log("üîß Debug info:"),console.log("- Raw clusters from API:",clusters),console.log("- Processed cluster features:",clusterFeatures),console.log("- All features for map:",allFeatures);const source=map.current.getSource("listings");source?(source.setData({type:"FeatureCollection",features:allFeatures}),console.log("‚úÖ Map source updated with",allFeatures.length,"features")):console.error("‚ùå Map source 'listings' not found");const total=data.count||clusterFeatures.reduce(((sum,feature)=>sum+feature.properties.count),0);setTotalCount(total),console.log(`‚úÖ Loaded ${clusterFeatures.length} clusters, ${propertyFeatures.length} properties, ${total} total`)}catch(err){const errorMessage=err instanceof Error?err.message:"Failed to load listings";setError(errorMessage),console.error("‚ùå Fetch failed:",err)}finally{setIsLoading(!1)}}),[apiKey,getClusterPrecision,boundsToPolygon]);return(0,react.useEffect)((()=>{if(mapContainer.current&&!map.current&&mapCenter&&null!==mapZoom)return mapbox_gl_default().accessToken=mapboxToken,map.current=new(mapbox_gl_default().Map)({container:mapContainer.current,style:mapStyle,center:mapCenter,zoom:mapZoom}),map.current.on("load",(()=>{if(!map.current)return;map.current.addSource("listings",{type:"geojson",data:{type:"FeatureCollection",features:[]}}),map.current.addLayer({id:"clusters",type:"circle",source:"listings",filter:["has","count"],paint:{"circle-color":["step",["get","count"],"#51bbd6",50,"#f1c40f",500,"#f28cb1",2e3,"#e74c3c"],"circle-radius":["step",["get","count"],15,50,25,500,35,2e3,45],"circle-stroke-width":2,"circle-stroke-color":"#fff","circle-opacity":.8}}),map.current.addLayer({id:"cluster-count",type:"symbol",source:"listings",filter:["has","count"],layout:{"text-field":["get","count"],"text-font":["DIN Offc Pro Medium","Arial Unicode MS Bold"],"text-size":["step",["get","count"],12,50,14,500,16,2e3,18]},paint:{"text-color":"#ffffff"}}),map.current.addLayer({id:"properties",type:"circle",source:"listings",filter:["has","isProperty"],paint:{"circle-color":"#3b82f6","circle-radius":6,"circle-stroke-width":2,"circle-stroke-color":"#fff","circle-opacity":.8}}),map.current.on("click","clusters",(e=>{var _e_features,_feature_properties;if(!map.current||!(null===(_e_features=e.features)||void 0===_e_features?void 0:_e_features[0]))return;const feature=e.features[0],coordinates=feature.geometry.coordinates,currentZoom=(null===(_feature_properties=feature.properties)||void 0===_feature_properties||_feature_properties.count,map.current.getZoom()),targetZoom=Math.min(currentZoom+2,16);map.current.easeTo({center:coordinates,zoom:targetZoom,duration:800})})),map.current.on("click","properties",(e=>{var _e_features;if(!(null===(_e_features=e.features)||void 0===_e_features?void 0:_e_features[0]))return;const feature=e.features[0],properties=feature.properties,coordinates=feature.geometry.coordinates;(new(mapbox_gl_default().Popup)).setLngLat(coordinates).setHTML(`\n            <div style="padding: 8px;">\n              <strong>MLS: ${null==properties?void 0:properties.mlsNumber}</strong>\n              ${(null==properties?void 0:properties.listPrice)?`<br>Price: $${properties.listPrice.toLocaleString()}`:""}\n            </div>\n          `).addTo(map.current)})),map.current.on("mouseenter","clusters",(()=>{map.current&&(map.current.getCanvas().style.cursor="pointer")})),map.current.on("mouseleave","clusters",(()=>{map.current&&(map.current.getCanvas().style.cursor="")})),map.current.on("mouseenter","properties",(()=>{map.current&&(map.current.getCanvas().style.cursor="pointer")})),map.current.on("mouseleave","properties",(()=>{map.current&&(map.current.getCanvas().style.cursor="")}));const bounds=map.current.getBounds();bounds&&fetchClusters(bounds)})),map.current.on("moveend",(()=>{if(!map.current)return;const bounds=map.current.getBounds();bounds&&fetchClusters(bounds)})),()=>{map.current&&(map.current.remove(),map.current=null)}}),[mapboxToken,mapStyle,mapCenter,mapZoom,fetchClusters]),(0,jsx_runtime.jsxs)("div",{style:{width,height,position:"relative"},children:[(0,jsx_runtime.jsx)("div",{ref:mapContainer,style:{width:"100%",height:"100%"},className:"rounded-lg overflow-hidden"}),isDetectingCenter&&(0,jsx_runtime.jsx)("div",{style:{position:"absolute",top:"0",left:"0",right:"0",bottom:"0",backgroundColor:"rgba(255, 255, 255, 0.9)",display:"flex",alignItems:"center",justifyContent:"center",borderRadius:"6px",zIndex:1e3},children:(0,jsx_runtime.jsxs)("div",{style:{textAlign:"center"},children:[(0,jsx_runtime.jsx)("div",{style:{fontSize:"16px",fontWeight:"600",marginBottom:"8px",color:"#374151"},children:"Detecting optimal map center..."}),(0,jsx_runtime.jsx)("div",{style:{fontSize:"14px",color:"#6b7280"},children:"Analyzing property locations"})]})}),(0,jsx_runtime.jsx)("div",{style:{position:"absolute",top:"16px",right:"16px",backgroundColor:"rgba(255, 255, 255, 0.95)",padding:"8px 12px",borderRadius:"6px",boxShadow:"0 2px 8px rgba(0, 0, 0, 0.15)",fontSize:"14px",fontWeight:"600",color:"#374151"},children:isDetectingCenter?(0,jsx_runtime.jsx)("span",{style:{color:"#6b7280"},children:"Auto-centering..."}):isLoading?(0,jsx_runtime.jsx)("span",{style:{color:"#6b7280"},children:"Loading..."}):error?(0,jsx_runtime.jsx)("span",{style:{color:"#ef4444"},children:"Error"}):(0,jsx_runtime.jsxs)("span",{children:[totalCount.toLocaleString()," properties"]})}),error&&(0,jsx_runtime.jsx)("div",{style:{position:"absolute",bottom:"16px",left:"16px",right:"16px",backgroundColor:"#fef2f2",border:"1px solid #fecaca",borderRadius:"6px",padding:"12px",color:"#b91c1c",fontSize:"14px"},children:error})]})}MapListings.__docgenInfo={description:"MapListings Component\n\nA high-performance real estate map component that displays property listings\nusing server-side clustering from the Repliers API. Automatically adjusts\ncluster precision based on zoom level for optimal user experience.\n\nFeatures:\n- Server-side clustering for optimal performance\n- Zoom-based precision adjustment\n- Hierarchical cluster drilling\n- Minimal API calls\n- Property count display",methods:[],displayName:"MapListings",props:{apiKey:{required:!0,tsType:{name:"string"},description:"Repliers API key - required"},mapboxToken:{required:!0,tsType:{name:"string"},description:"MapBox access token - required"},initialCenter:{required:!1,tsType:{name:"tuple",raw:"[number, number]",elements:[{name:"number"},{name:"number"}]},description:"Initial map center coordinates [lng, lat] - auto-detects if not provided"},initialZoom:{required:!1,tsType:{name:"number"},description:"Initial zoom level - auto-calculates if not provided"},height:{required:!1,tsType:{name:"string"},description:"Map container height",defaultValue:{value:'"100%"',computed:!1}},width:{required:!1,tsType:{name:"string"},description:"Map container width",defaultValue:{value:'"100%"',computed:!1}},mapStyle:{required:!1,tsType:{name:"string"},description:"Map style",defaultValue:{value:'"mapbox://styles/mapbox/streets-v12"',computed:!1}}}};const map_listings_stories={title:"Tutorials/Configuring the MapListings Component with the Repliers API (WIP)",component:MapListings,parameters:{layout:"fullscreen",docs:{page:()=>null}},argTypes:{apiKey:{control:"text",description:"Repliers API key (required)"},mapboxToken:{control:"text",description:"MapBox access token (required)"},initialCenter:{control:"object",description:"Initial map center coordinates [lng, lat]"},initialZoom:{control:{type:"range",min:1,max:20,step:1},description:"Initial zoom level"},height:{control:"text",description:"Map container height"},width:{control:"text",description:"Map container width"},mapStyle:{control:"select",options:["mapbox://styles/mapbox/streets-v12","mapbox://styles/mapbox/light-v11","mapbox://styles/mapbox/dark-v11","mapbox://styles/mapbox/satellite-v9","mapbox://styles/mapbox/satellite-streets-v12"],description:"MapBox map style"}}},SAMPLE_API_KEY="pxI19UMy9zfw9vz5lRxoGpjJWXrMnm",SAMPLE_MAPBOX_TOKEN="pk.eyJ1IjoibWlsYW5zb21hIiwiYSI6ImNtZWJrODZmajBwMWQya3B3cHE1M2Y3anoifQ.HMDLOc-6V9K3-mHKeTHHxw",Part1_BasicListings={args:{apiKey:SAMPLE_API_KEY,mapboxToken:SAMPLE_MAPBOX_TOKEN,initialZoom:8,height:"100vh",width:"100vw",mapStyle:"mapbox://styles/mapbox/streets-v12"},parameters:{docs:{description:{story:"\nüéØ **This is the main interactive demo!** This example demonstrates server-side clustering \nwith the Repliers API. The component automatically adjusts cluster precision based on zoom level:\n\n- **Zoom 8 and below**: City-level clusters (thousands of properties)\n- **Zoom 9-10**: District-level clusters  \n- **Zoom 11-12**: Neighborhood-level clusters\n- **Zoom 13-14**: Street-level clusters\n- **Zoom 15+**: Individual properties\n\n**Performance Features:**\n- Server-side clustering reduces data transfer\n- Only one API call per map movement\n- Automatic precision adjustment optimizes performance\n        "}}}},Part2_AlternativeDataset={args:{apiKey:SAMPLE_API_KEY,mapboxToken:SAMPLE_MAPBOX_TOKEN,initialCenter:[-98.5795,39.8283],initialZoom:4,height:"100vh",width:"100vw",mapStyle:"mapbox://styles/mapbox/streets-v12"},parameters:{docs:{disable:!0}}},Part3_FilteredSearch={args:{apiKey:SAMPLE_API_KEY,mapboxToken:SAMPLE_MAPBOX_TOKEN,initialCenter:[-98.5795,39.8283],initialZoom:4,height:"100vh",width:"100vw",mapStyle:"mapbox://styles/mapbox/streets-v12"},parameters:{docs:{disable:!0}}},__namedExportsOrder=["Part1_BasicListings","Part2_AlternativeDataset","Part3_FilteredSearch"];Part1_BasicListings.parameters={...Part1_BasicListings.parameters,docs:{...Part1_BasicListings.parameters?.docs,source:{originalSource:'{\n  args: {\n    apiKey: SAMPLE_API_KEY,\n    mapboxToken: SAMPLE_MAPBOX_TOKEN,\n    initialZoom: 8,\n    height: "100vh",\n    width: "100vw",\n    mapStyle: "mapbox://styles/mapbox/streets-v12"\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: `\nüéØ **This is the main interactive demo!** This example demonstrates server-side clustering \nwith the Repliers API. The component automatically adjusts cluster precision based on zoom level:\n\n- **Zoom 8 and below**: City-level clusters (thousands of properties)\n- **Zoom 9-10**: District-level clusters  \n- **Zoom 11-12**: Neighborhood-level clusters\n- **Zoom 13-14**: Street-level clusters\n- **Zoom 15+**: Individual properties\n\n**Performance Features:**\n- Server-side clustering reduces data transfer\n- Only one API call per map movement\n- Automatic precision adjustment optimizes performance\n        `\n      }\n    }\n  }\n}',...Part1_BasicListings.parameters?.docs?.source},description:{story:"**Part 1: Basic Map Listings Display**\n\nThis example shows the core functionality of displaying clustered real estate\nlistings on a map. Different API keys will show different datasets.\n\n**Try this:**\n1. Notice the large cluster numbers (hundreds/thousands of properties)\n2. Click any cluster to zoom in and see it break into smaller sub-clusters\n3. Continue drilling down until you reach individual blue property dots\n4. Click individual properties to see basic listing details\n5. Watch the property count update in the top-right corner",...Part1_BasicListings.parameters?.docs?.description}}},Part2_AlternativeDataset.parameters={...Part2_AlternativeDataset.parameters,docs:{...Part2_AlternativeDataset.parameters?.docs,source:{originalSource:'{\n  args: {\n    apiKey: SAMPLE_API_KEY,\n    mapboxToken: SAMPLE_MAPBOX_TOKEN,\n    initialCenter: [-98.5795, 39.8283],\n    // Continental USA center\n    initialZoom: 4,\n    height: "100vh",\n    width: "100vw",\n    mapStyle: "mapbox://styles/mapbox/streets-v12"\n  },\n  parameters: {\n    docs: {\n      disable: true // Hide from docs\n    }\n  }\n}',...Part2_AlternativeDataset.parameters?.docs?.source},description:{story:"**Part 2: Alternative Dataset Comparison**\n\nThis example uses a different API key to demonstrate how the same component\ncan display different property datasets. Perfect for comparing different\ndata sources or testing API key configurations.",...Part2_AlternativeDataset.parameters?.docs?.description}}},Part3_FilteredSearch.parameters={...Part3_FilteredSearch.parameters,docs:{...Part3_FilteredSearch.parameters?.docs,source:{originalSource:'{\n  args: {\n    apiKey: SAMPLE_API_KEY,\n    mapboxToken: SAMPLE_MAPBOX_TOKEN,\n    initialCenter: [-98.5795, 39.8283],\n    // Continental USA center\n    initialZoom: 4,\n    height: "100vh",\n    width: "100vw",\n    mapStyle: "mapbox://styles/mapbox/streets-v12"\n    // Note: These are placeholder props for future filter implementation\n    // minBedrooms: 2,\n    // maxPrice: 800000,\n    // propertyTypes: [\'residential\', \'condo\']\n  },\n  parameters: {\n    docs: {\n      disable: true // Hide from docs\n    }\n  }\n}',...Part3_FilteredSearch.parameters?.docs?.source},description:{story:"**Part 3: Custom Filters and Multi-Query Setup**\n\nThis placeholder demonstrates how the component could be extended with\nproperty filters (bedrooms, bathrooms, price range) and multi-query\nfunctionality for complex search scenarios.",...Part3_FilteredSearch.parameters?.docs?.description}}}}}]);